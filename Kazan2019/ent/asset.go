// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assetgroup"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/employee"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AssetGroupID holds the value of the "AssetGroupID" field.
	AssetGroupID int `json:"AssetGroupID,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int `json:"EmployeeID,omitempty"`
	// DepartmentLocationID holds the value of the "DepartmentLocationID" field.
	DepartmentLocationID int `json:"DepartmentLocationID,omitempty"`
	// AssetSN holds the value of the "AssetSN" field.
	AssetSN int `json:"AssetSN,omitempty"`
	// AssetName holds the value of the "AssetName" field.
	AssetName string `json:"AssetName,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// WarrantyDate holds the value of the "WarrantyDate" field.
	WarrantyDate time.Time `json:"WarrantyDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges AssetEdges `json:"edges"`
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// AssetPhoto holds the value of the AssetPhoto edge.
	AssetPhoto []*AssetPhoto `json:"AssetPhoto,omitempty"`
	// AssetTransferLog holds the value of the AssetTransferLog edge.
	AssetTransferLog []*AssetTransferLog `json:"AssetTransferLog,omitempty"`
	// DepartmentLocation holds the value of the DepartmentLocation edge.
	DepartmentLocation *DepartmentLocation `json:"DepartmentLocation,omitempty"`
	// Employee holds the value of the Employee edge.
	Employee *Employee `json:"Employee,omitempty"`
	// AssetGroup holds the value of the AssetGroup edge.
	AssetGroup *AssetGroup `json:"AssetGroup,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AssetPhotoOrErr returns the AssetPhoto value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) AssetPhotoOrErr() ([]*AssetPhoto, error) {
	if e.loadedTypes[0] {
		return e.AssetPhoto, nil
	}
	return nil, &NotLoadedError{edge: "AssetPhoto"}
}

// AssetTransferLogOrErr returns the AssetTransferLog value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) AssetTransferLogOrErr() ([]*AssetTransferLog, error) {
	if e.loadedTypes[1] {
		return e.AssetTransferLog, nil
	}
	return nil, &NotLoadedError{edge: "AssetTransferLog"}
}

// DepartmentLocationOrErr returns the DepartmentLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) DepartmentLocationOrErr() (*DepartmentLocation, error) {
	if e.loadedTypes[2] {
		if e.DepartmentLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: departmentlocation.Label}
		}
		return e.DepartmentLocation, nil
	}
	return nil, &NotLoadedError{edge: "DepartmentLocation"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[3] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "Employee"}
}

// AssetGroupOrErr returns the AssetGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) AssetGroupOrErr() (*AssetGroup, error) {
	if e.loadedTypes[4] {
		if e.AssetGroup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: assetgroup.Label}
		}
		return e.AssetGroup, nil
	}
	return nil, &NotLoadedError{edge: "AssetGroup"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldID, asset.FieldAssetGroupID, asset.FieldEmployeeID, asset.FieldDepartmentLocationID, asset.FieldAssetSN:
			values[i] = new(sql.NullInt64)
		case asset.FieldAssetName, asset.FieldDescription:
			values[i] = new(sql.NullString)
		case asset.FieldWarrantyDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Asset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (a *Asset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case asset.FieldAssetGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AssetGroupID", values[i])
			} else if value.Valid {
				a.AssetGroupID = int(value.Int64)
			}
		case asset.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				a.EmployeeID = int(value.Int64)
			}
		case asset.FieldDepartmentLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DepartmentLocationID", values[i])
			} else if value.Valid {
				a.DepartmentLocationID = int(value.Int64)
			}
		case asset.FieldAssetSN:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AssetSN", values[i])
			} else if value.Valid {
				a.AssetSN = int(value.Int64)
			}
		case asset.FieldAssetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AssetName", values[i])
			} else if value.Valid {
				a.AssetName = value.String
			}
		case asset.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case asset.FieldWarrantyDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field WarrantyDate", values[i])
			} else if value.Valid {
				a.WarrantyDate = value.Time
			}
		}
	}
	return nil
}

// QueryAssetPhoto queries the "AssetPhoto" edge of the Asset entity.
func (a *Asset) QueryAssetPhoto() *AssetPhotoQuery {
	return NewAssetClient(a.config).QueryAssetPhoto(a)
}

// QueryAssetTransferLog queries the "AssetTransferLog" edge of the Asset entity.
func (a *Asset) QueryAssetTransferLog() *AssetTransferLogQuery {
	return NewAssetClient(a.config).QueryAssetTransferLog(a)
}

// QueryDepartmentLocation queries the "DepartmentLocation" edge of the Asset entity.
func (a *Asset) QueryDepartmentLocation() *DepartmentLocationQuery {
	return NewAssetClient(a.config).QueryDepartmentLocation(a)
}

// QueryEmployee queries the "Employee" edge of the Asset entity.
func (a *Asset) QueryEmployee() *EmployeeQuery {
	return NewAssetClient(a.config).QueryEmployee(a)
}

// QueryAssetGroup queries the "AssetGroup" edge of the Asset entity.
func (a *Asset) QueryAssetGroup() *AssetGroupQuery {
	return NewAssetClient(a.config).QueryAssetGroup(a)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Asset) Update() *AssetUpdateOne {
	return NewAssetClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Asset) Unwrap() *Asset {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Asset is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("AssetGroupID=")
	builder.WriteString(fmt.Sprintf("%v", a.AssetGroupID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", a.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("DepartmentLocationID=")
	builder.WriteString(fmt.Sprintf("%v", a.DepartmentLocationID))
	builder.WriteString(", ")
	builder.WriteString("AssetSN=")
	builder.WriteString(fmt.Sprintf("%v", a.AssetSN))
	builder.WriteString(", ")
	builder.WriteString("AssetName=")
	builder.WriteString(a.AssetName)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("WarrantyDate=")
	builder.WriteString(a.WarrantyDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Assets is a parsable slice of Asset.
type Assets []*Asset

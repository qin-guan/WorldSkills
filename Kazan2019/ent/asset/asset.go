// Code generated by ent, DO NOT EDIT.

package asset

const (
	// Label holds the string label denoting the asset type in the database.
	Label = "asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldAssetGroupID holds the string denoting the assetgroupid field in the database.
	FieldAssetGroupID = "asset_group_id"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldDepartmentLocationID holds the string denoting the departmentlocationid field in the database.
	FieldDepartmentLocationID = "department_location_id"
	// FieldAssetSN holds the string denoting the assetsn field in the database.
	FieldAssetSN = "asset_sn"
	// FieldAssetName holds the string denoting the assetname field in the database.
	FieldAssetName = "asset_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldWarrantyDate holds the string denoting the warrantydate field in the database.
	FieldWarrantyDate = "warranty_date"
	// EdgeAssetPhoto holds the string denoting the assetphoto edge name in mutations.
	EdgeAssetPhoto = "AssetPhoto"
	// EdgeAssetTransferLog holds the string denoting the assettransferlog edge name in mutations.
	EdgeAssetTransferLog = "AssetTransferLog"
	// EdgeDepartmentLocation holds the string denoting the departmentlocation edge name in mutations.
	EdgeDepartmentLocation = "DepartmentLocation"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "Employee"
	// EdgeAssetGroup holds the string denoting the assetgroup edge name in mutations.
	EdgeAssetGroup = "AssetGroup"
	// Table holds the table name of the asset in the database.
	Table = "assets"
	// AssetPhotoTable is the table that holds the AssetPhoto relation/edge.
	AssetPhotoTable = "asset_photos"
	// AssetPhotoInverseTable is the table name for the AssetPhoto entity.
	// It exists in this package in order to avoid circular dependency with the "assetphoto" package.
	AssetPhotoInverseTable = "asset_photos"
	// AssetPhotoColumn is the table column denoting the AssetPhoto relation/edge.
	AssetPhotoColumn = "asset_asset_photo"
	// AssetTransferLogTable is the table that holds the AssetTransferLog relation/edge.
	AssetTransferLogTable = "asset_transfer_logs"
	// AssetTransferLogInverseTable is the table name for the AssetTransferLog entity.
	// It exists in this package in order to avoid circular dependency with the "assettransferlog" package.
	AssetTransferLogInverseTable = "asset_transfer_logs"
	// AssetTransferLogColumn is the table column denoting the AssetTransferLog relation/edge.
	AssetTransferLogColumn = "asset_id"
	// DepartmentLocationTable is the table that holds the DepartmentLocation relation/edge.
	DepartmentLocationTable = "assets"
	// DepartmentLocationInverseTable is the table name for the DepartmentLocation entity.
	// It exists in this package in order to avoid circular dependency with the "departmentlocation" package.
	DepartmentLocationInverseTable = "department_locations"
	// DepartmentLocationColumn is the table column denoting the DepartmentLocation relation/edge.
	DepartmentLocationColumn = "department_location_id"
	// EmployeeTable is the table that holds the Employee relation/edge.
	EmployeeTable = "assets"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the Employee relation/edge.
	EmployeeColumn = "employee_id"
	// AssetGroupTable is the table that holds the AssetGroup relation/edge.
	AssetGroupTable = "assets"
	// AssetGroupInverseTable is the table name for the AssetGroup entity.
	// It exists in this package in order to avoid circular dependency with the "assetgroup" package.
	AssetGroupInverseTable = "asset_groups"
	// AssetGroupColumn is the table column denoting the AssetGroup relation/edge.
	AssetGroupColumn = "asset_group_id"
)

// Columns holds all SQL columns for asset fields.
var Columns = []string{
	FieldID,
	FieldAssetGroupID,
	FieldEmployeeID,
	FieldDepartmentLocationID,
	FieldAssetSN,
	FieldAssetName,
	FieldDescription,
	FieldWarrantyDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AssetSNValidator is a validator for the "AssetSN" field. It is called by the builders before save.
	AssetSNValidator func(int) error
)

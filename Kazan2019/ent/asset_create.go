// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assetgroup"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assetphoto"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/employee"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
}

// SetAssetGroupID sets the "AssetGroupID" field.
func (ac *AssetCreate) SetAssetGroupID(i int) *AssetCreate {
	ac.mutation.SetAssetGroupID(i)
	return ac
}

// SetEmployeeID sets the "EmployeeID" field.
func (ac *AssetCreate) SetEmployeeID(i int) *AssetCreate {
	ac.mutation.SetEmployeeID(i)
	return ac
}

// SetDepartmentLocationID sets the "DepartmentLocationID" field.
func (ac *AssetCreate) SetDepartmentLocationID(i int) *AssetCreate {
	ac.mutation.SetDepartmentLocationID(i)
	return ac
}

// SetAssetSN sets the "AssetSN" field.
func (ac *AssetCreate) SetAssetSN(i int) *AssetCreate {
	ac.mutation.SetAssetSN(i)
	return ac
}

// SetAssetName sets the "AssetName" field.
func (ac *AssetCreate) SetAssetName(s string) *AssetCreate {
	ac.mutation.SetAssetName(s)
	return ac
}

// SetDescription sets the "Description" field.
func (ac *AssetCreate) SetDescription(s string) *AssetCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetWarrantyDate sets the "WarrantyDate" field.
func (ac *AssetCreate) SetWarrantyDate(t time.Time) *AssetCreate {
	ac.mutation.SetWarrantyDate(t)
	return ac
}

// SetID sets the "id" field.
func (ac *AssetCreate) SetID(i int) *AssetCreate {
	ac.mutation.SetID(i)
	return ac
}

// AddAssetPhotoIDs adds the "AssetPhoto" edge to the AssetPhoto entity by IDs.
func (ac *AssetCreate) AddAssetPhotoIDs(ids ...int) *AssetCreate {
	ac.mutation.AddAssetPhotoIDs(ids...)
	return ac
}

// AddAssetPhoto adds the "AssetPhoto" edges to the AssetPhoto entity.
func (ac *AssetCreate) AddAssetPhoto(a ...*AssetPhoto) *AssetCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAssetPhotoIDs(ids...)
}

// AddAssetTransferLogIDs adds the "AssetTransferLog" edge to the AssetTransferLog entity by IDs.
func (ac *AssetCreate) AddAssetTransferLogIDs(ids ...int) *AssetCreate {
	ac.mutation.AddAssetTransferLogIDs(ids...)
	return ac
}

// AddAssetTransferLog adds the "AssetTransferLog" edges to the AssetTransferLog entity.
func (ac *AssetCreate) AddAssetTransferLog(a ...*AssetTransferLog) *AssetCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAssetTransferLogIDs(ids...)
}

// SetDepartmentLocation sets the "DepartmentLocation" edge to the DepartmentLocation entity.
func (ac *AssetCreate) SetDepartmentLocation(d *DepartmentLocation) *AssetCreate {
	return ac.SetDepartmentLocationID(d.ID)
}

// SetEmployee sets the "Employee" edge to the Employee entity.
func (ac *AssetCreate) SetEmployee(e *Employee) *AssetCreate {
	return ac.SetEmployeeID(e.ID)
}

// SetAssetGroup sets the "AssetGroup" edge to the AssetGroup entity.
func (ac *AssetCreate) SetAssetGroup(a *AssetGroup) *AssetCreate {
	return ac.SetAssetGroupID(a.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (ac *AssetCreate) Mutation() *AssetMutation {
	return ac.mutation
}

// Save creates the Asset in the database.
func (ac *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	return withHooks[*Asset, AssetMutation](ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssetCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssetCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssetCreate) check() error {
	if _, ok := ac.mutation.AssetGroupID(); !ok {
		return &ValidationError{Name: "AssetGroupID", err: errors.New(`ent: missing required field "Asset.AssetGroupID"`)}
	}
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "EmployeeID", err: errors.New(`ent: missing required field "Asset.EmployeeID"`)}
	}
	if _, ok := ac.mutation.DepartmentLocationID(); !ok {
		return &ValidationError{Name: "DepartmentLocationID", err: errors.New(`ent: missing required field "Asset.DepartmentLocationID"`)}
	}
	if _, ok := ac.mutation.AssetSN(); !ok {
		return &ValidationError{Name: "AssetSN", err: errors.New(`ent: missing required field "Asset.AssetSN"`)}
	}
	if v, ok := ac.mutation.AssetSN(); ok {
		if err := asset.AssetSNValidator(v); err != nil {
			return &ValidationError{Name: "AssetSN", err: fmt.Errorf(`ent: validator failed for field "Asset.AssetSN": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AssetName(); !ok {
		return &ValidationError{Name: "AssetName", err: errors.New(`ent: missing required field "Asset.AssetName"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`ent: missing required field "Asset.Description"`)}
	}
	if _, ok := ac.mutation.WarrantyDate(); !ok {
		return &ValidationError{Name: "WarrantyDate", err: errors.New(`ent: missing required field "Asset.WarrantyDate"`)}
	}
	if _, ok := ac.mutation.DepartmentLocationID(); !ok {
		return &ValidationError{Name: "DepartmentLocation", err: errors.New(`ent: missing required edge "Asset.DepartmentLocation"`)}
	}
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "Employee", err: errors.New(`ent: missing required edge "Asset.Employee"`)}
	}
	if _, ok := ac.mutation.AssetGroupID(); !ok {
		return &ValidationError{Name: "AssetGroup", err: errors.New(`ent: missing required edge "Asset.AssetGroup"`)}
	}
	return nil
}

func (ac *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(asset.Table, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.AssetSN(); ok {
		_spec.SetField(asset.FieldAssetSN, field.TypeInt, value)
		_node.AssetSN = value
	}
	if value, ok := ac.mutation.AssetName(); ok {
		_spec.SetField(asset.FieldAssetName, field.TypeString, value)
		_node.AssetName = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.WarrantyDate(); ok {
		_spec.SetField(asset.FieldWarrantyDate, field.TypeTime, value)
		_node.WarrantyDate = value
	}
	if nodes := ac.mutation.AssetPhotoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetPhotoTable,
			Columns: []string{asset.AssetPhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetphoto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AssetTransferLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetTransferLogTable,
			Columns: []string{asset.AssetTransferLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.DepartmentLocationTable,
			Columns: []string{asset.DepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.EmployeeTable,
			Columns: []string{asset.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AssetGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.AssetGroupTable,
			Columns: []string{asset.AssetGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetGroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	builders []*AssetCreate
}

// Save creates the Asset entities in the database.
func (acb *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Asset, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

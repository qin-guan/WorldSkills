// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assetphoto"
)

// AssetPhoto is the model entity for the AssetPhoto schema.
type AssetPhoto struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AssetPhoto holds the value of the "AssetPhoto" field.
	AssetPhoto string `json:"AssetPhoto,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetPhotoQuery when eager-loading is set.
	Edges             AssetPhotoEdges `json:"edges"`
	asset_asset_photo *int
}

// AssetPhotoEdges holds the relations/edges for other nodes in the graph.
type AssetPhotoEdges struct {
	// Asset holds the value of the Asset edge.
	Asset *Asset `json:"Asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetPhotoEdges) AssetOrErr() (*Asset, error) {
	if e.loadedTypes[0] {
		if e.Asset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "Asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetPhoto) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetphoto.FieldID:
			values[i] = new(sql.NullInt64)
		case assetphoto.FieldAssetPhoto:
			values[i] = new(sql.NullString)
		case assetphoto.ForeignKeys[0]: // asset_asset_photo
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AssetPhoto", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetPhoto fields.
func (ap *AssetPhoto) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetphoto.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case assetphoto.FieldAssetPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AssetPhoto", values[i])
			} else if value.Valid {
				ap.AssetPhoto = value.String
			}
		case assetphoto.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field asset_asset_photo", value)
			} else if value.Valid {
				ap.asset_asset_photo = new(int)
				*ap.asset_asset_photo = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAsset queries the "Asset" edge of the AssetPhoto entity.
func (ap *AssetPhoto) QueryAsset() *AssetQuery {
	return NewAssetPhotoClient(ap.config).QueryAsset(ap)
}

// Update returns a builder for updating this AssetPhoto.
// Note that you need to call AssetPhoto.Unwrap() before calling this method if this AssetPhoto
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AssetPhoto) Update() *AssetPhotoUpdateOne {
	return NewAssetPhotoClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AssetPhoto entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AssetPhoto) Unwrap() *AssetPhoto {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetPhoto is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AssetPhoto) String() string {
	var builder strings.Builder
	builder.WriteString("AssetPhoto(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("AssetPhoto=")
	builder.WriteString(ap.AssetPhoto)
	builder.WriteByte(')')
	return builder.String()
}

// AssetPhotos is a parsable slice of AssetPhoto.
type AssetPhotos []*AssetPhoto

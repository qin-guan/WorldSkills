// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assetphoto"
)

// AssetPhotoCreate is the builder for creating a AssetPhoto entity.
type AssetPhotoCreate struct {
	config
	mutation *AssetPhotoMutation
	hooks    []Hook
}

// SetAssetPhoto sets the "AssetPhoto" field.
func (apc *AssetPhotoCreate) SetAssetPhoto(s string) *AssetPhotoCreate {
	apc.mutation.SetAssetPhoto(s)
	return apc
}

// SetID sets the "id" field.
func (apc *AssetPhotoCreate) SetID(i int) *AssetPhotoCreate {
	apc.mutation.SetID(i)
	return apc
}

// SetAssetID sets the "Asset" edge to the Asset entity by ID.
func (apc *AssetPhotoCreate) SetAssetID(id int) *AssetPhotoCreate {
	apc.mutation.SetAssetID(id)
	return apc
}

// SetAsset sets the "Asset" edge to the Asset entity.
func (apc *AssetPhotoCreate) SetAsset(a *Asset) *AssetPhotoCreate {
	return apc.SetAssetID(a.ID)
}

// Mutation returns the AssetPhotoMutation object of the builder.
func (apc *AssetPhotoCreate) Mutation() *AssetPhotoMutation {
	return apc.mutation
}

// Save creates the AssetPhoto in the database.
func (apc *AssetPhotoCreate) Save(ctx context.Context) (*AssetPhoto, error) {
	return withHooks[*AssetPhoto, AssetPhotoMutation](ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AssetPhotoCreate) SaveX(ctx context.Context) *AssetPhoto {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AssetPhotoCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AssetPhotoCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AssetPhotoCreate) check() error {
	if _, ok := apc.mutation.AssetPhoto(); !ok {
		return &ValidationError{Name: "AssetPhoto", err: errors.New(`ent: missing required field "AssetPhoto.AssetPhoto"`)}
	}
	if _, ok := apc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "Asset", err: errors.New(`ent: missing required edge "AssetPhoto.Asset"`)}
	}
	return nil
}

func (apc *AssetPhotoCreate) sqlSave(ctx context.Context) (*AssetPhoto, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AssetPhotoCreate) createSpec() (*AssetPhoto, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetPhoto{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(assetphoto.Table, sqlgraph.NewFieldSpec(assetphoto.FieldID, field.TypeInt))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.AssetPhoto(); ok {
		_spec.SetField(assetphoto.FieldAssetPhoto, field.TypeString, value)
		_node.AssetPhoto = value
	}
	if nodes := apc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetphoto.AssetTable,
			Columns: []string{assetphoto.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.asset_asset_photo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetPhotoCreateBulk is the builder for creating many AssetPhoto entities in bulk.
type AssetPhotoCreateBulk struct {
	config
	builders []*AssetPhotoCreate
}

// Save creates the AssetPhoto entities in the database.
func (apcb *AssetPhotoCreateBulk) Save(ctx context.Context) ([]*AssetPhoto, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AssetPhoto, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetPhotoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AssetPhotoCreateBulk) SaveX(ctx context.Context) []*AssetPhoto {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AssetPhotoCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AssetPhotoCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}

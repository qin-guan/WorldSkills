// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
)

// AssetTransferLog is the model entity for the AssetTransferLog schema.
type AssetTransferLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AssetID holds the value of the "AssetID" field.
	AssetID int `json:"AssetID,omitempty"`
	// FromAssetSN holds the value of the "FromAssetSN" field.
	FromAssetSN int `json:"FromAssetSN,omitempty"`
	// ToAssetSN holds the value of the "ToAssetSN" field.
	ToAssetSN int `json:"ToAssetSN,omitempty"`
	// FromDepartmentLocationID holds the value of the "FromDepartmentLocationID" field.
	FromDepartmentLocationID int `json:"FromDepartmentLocationID,omitempty"`
	// ToDepartmentLocationID holds the value of the "ToDepartmentLocationID" field.
	ToDepartmentLocationID int `json:"ToDepartmentLocationID,omitempty"`
	// TransferDate holds the value of the "TransferDate" field.
	TransferDate time.Time `json:"TransferDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetTransferLogQuery when eager-loading is set.
	Edges AssetTransferLogEdges `json:"edges"`
}

// AssetTransferLogEdges holds the relations/edges for other nodes in the graph.
type AssetTransferLogEdges struct {
	// Asset holds the value of the Asset edge.
	Asset *Asset `json:"Asset,omitempty"`
	// FromDepartmentLocation holds the value of the FromDepartmentLocation edge.
	FromDepartmentLocation *DepartmentLocation `json:"FromDepartmentLocation,omitempty"`
	// ToDepartmentLocation holds the value of the ToDepartmentLocation edge.
	ToDepartmentLocation *DepartmentLocation `json:"ToDepartmentLocation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetTransferLogEdges) AssetOrErr() (*Asset, error) {
	if e.loadedTypes[0] {
		if e.Asset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "Asset"}
}

// FromDepartmentLocationOrErr returns the FromDepartmentLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetTransferLogEdges) FromDepartmentLocationOrErr() (*DepartmentLocation, error) {
	if e.loadedTypes[1] {
		if e.FromDepartmentLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: departmentlocation.Label}
		}
		return e.FromDepartmentLocation, nil
	}
	return nil, &NotLoadedError{edge: "FromDepartmentLocation"}
}

// ToDepartmentLocationOrErr returns the ToDepartmentLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetTransferLogEdges) ToDepartmentLocationOrErr() (*DepartmentLocation, error) {
	if e.loadedTypes[2] {
		if e.ToDepartmentLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: departmentlocation.Label}
		}
		return e.ToDepartmentLocation, nil
	}
	return nil, &NotLoadedError{edge: "ToDepartmentLocation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetTransferLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assettransferlog.FieldID, assettransferlog.FieldAssetID, assettransferlog.FieldFromAssetSN, assettransferlog.FieldToAssetSN, assettransferlog.FieldFromDepartmentLocationID, assettransferlog.FieldToDepartmentLocationID:
			values[i] = new(sql.NullInt64)
		case assettransferlog.FieldTransferDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AssetTransferLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetTransferLog fields.
func (atl *AssetTransferLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assettransferlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			atl.ID = int(value.Int64)
		case assettransferlog.FieldAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AssetID", values[i])
			} else if value.Valid {
				atl.AssetID = int(value.Int64)
			}
		case assettransferlog.FieldFromAssetSN:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FromAssetSN", values[i])
			} else if value.Valid {
				atl.FromAssetSN = int(value.Int64)
			}
		case assettransferlog.FieldToAssetSN:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ToAssetSN", values[i])
			} else if value.Valid {
				atl.ToAssetSN = int(value.Int64)
			}
		case assettransferlog.FieldFromDepartmentLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FromDepartmentLocationID", values[i])
			} else if value.Valid {
				atl.FromDepartmentLocationID = int(value.Int64)
			}
		case assettransferlog.FieldToDepartmentLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ToDepartmentLocationID", values[i])
			} else if value.Valid {
				atl.ToDepartmentLocationID = int(value.Int64)
			}
		case assettransferlog.FieldTransferDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field TransferDate", values[i])
			} else if value.Valid {
				atl.TransferDate = value.Time
			}
		}
	}
	return nil
}

// QueryAsset queries the "Asset" edge of the AssetTransferLog entity.
func (atl *AssetTransferLog) QueryAsset() *AssetQuery {
	return NewAssetTransferLogClient(atl.config).QueryAsset(atl)
}

// QueryFromDepartmentLocation queries the "FromDepartmentLocation" edge of the AssetTransferLog entity.
func (atl *AssetTransferLog) QueryFromDepartmentLocation() *DepartmentLocationQuery {
	return NewAssetTransferLogClient(atl.config).QueryFromDepartmentLocation(atl)
}

// QueryToDepartmentLocation queries the "ToDepartmentLocation" edge of the AssetTransferLog entity.
func (atl *AssetTransferLog) QueryToDepartmentLocation() *DepartmentLocationQuery {
	return NewAssetTransferLogClient(atl.config).QueryToDepartmentLocation(atl)
}

// Update returns a builder for updating this AssetTransferLog.
// Note that you need to call AssetTransferLog.Unwrap() before calling this method if this AssetTransferLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (atl *AssetTransferLog) Update() *AssetTransferLogUpdateOne {
	return NewAssetTransferLogClient(atl.config).UpdateOne(atl)
}

// Unwrap unwraps the AssetTransferLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (atl *AssetTransferLog) Unwrap() *AssetTransferLog {
	_tx, ok := atl.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetTransferLog is not a transactional entity")
	}
	atl.config.driver = _tx.drv
	return atl
}

// String implements the fmt.Stringer.
func (atl *AssetTransferLog) String() string {
	var builder strings.Builder
	builder.WriteString("AssetTransferLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", atl.ID))
	builder.WriteString("AssetID=")
	builder.WriteString(fmt.Sprintf("%v", atl.AssetID))
	builder.WriteString(", ")
	builder.WriteString("FromAssetSN=")
	builder.WriteString(fmt.Sprintf("%v", atl.FromAssetSN))
	builder.WriteString(", ")
	builder.WriteString("ToAssetSN=")
	builder.WriteString(fmt.Sprintf("%v", atl.ToAssetSN))
	builder.WriteString(", ")
	builder.WriteString("FromDepartmentLocationID=")
	builder.WriteString(fmt.Sprintf("%v", atl.FromDepartmentLocationID))
	builder.WriteString(", ")
	builder.WriteString("ToDepartmentLocationID=")
	builder.WriteString(fmt.Sprintf("%v", atl.ToDepartmentLocationID))
	builder.WriteString(", ")
	builder.WriteString("TransferDate=")
	builder.WriteString(atl.TransferDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AssetTransferLogs is a parsable slice of AssetTransferLog.
type AssetTransferLogs []*AssetTransferLog

// Code generated by ent, DO NOT EDIT.

package assettransferlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLTE(FieldID, id))
}

// AssetID applies equality check predicate on the "AssetID" field. It's identical to AssetIDEQ.
func AssetID(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldAssetID, v))
}

// FromAssetSN applies equality check predicate on the "FromAssetSN" field. It's identical to FromAssetSNEQ.
func FromAssetSN(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldFromAssetSN, v))
}

// ToAssetSN applies equality check predicate on the "ToAssetSN" field. It's identical to ToAssetSNEQ.
func ToAssetSN(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldToAssetSN, v))
}

// FromDepartmentLocationID applies equality check predicate on the "FromDepartmentLocationID" field. It's identical to FromDepartmentLocationIDEQ.
func FromDepartmentLocationID(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldFromDepartmentLocationID, v))
}

// ToDepartmentLocationID applies equality check predicate on the "ToDepartmentLocationID" field. It's identical to ToDepartmentLocationIDEQ.
func ToDepartmentLocationID(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldToDepartmentLocationID, v))
}

// TransferDate applies equality check predicate on the "TransferDate" field. It's identical to TransferDateEQ.
func TransferDate(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldTransferDate, v))
}

// AssetIDEQ applies the EQ predicate on the "AssetID" field.
func AssetIDEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldAssetID, v))
}

// AssetIDNEQ applies the NEQ predicate on the "AssetID" field.
func AssetIDNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldAssetID, v))
}

// AssetIDIn applies the In predicate on the "AssetID" field.
func AssetIDIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldAssetID, vs...))
}

// AssetIDNotIn applies the NotIn predicate on the "AssetID" field.
func AssetIDNotIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldAssetID, vs...))
}

// FromAssetSNEQ applies the EQ predicate on the "FromAssetSN" field.
func FromAssetSNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldFromAssetSN, v))
}

// FromAssetSNNEQ applies the NEQ predicate on the "FromAssetSN" field.
func FromAssetSNNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldFromAssetSN, v))
}

// FromAssetSNIn applies the In predicate on the "FromAssetSN" field.
func FromAssetSNIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldFromAssetSN, vs...))
}

// FromAssetSNNotIn applies the NotIn predicate on the "FromAssetSN" field.
func FromAssetSNNotIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldFromAssetSN, vs...))
}

// FromAssetSNGT applies the GT predicate on the "FromAssetSN" field.
func FromAssetSNGT(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGT(FieldFromAssetSN, v))
}

// FromAssetSNGTE applies the GTE predicate on the "FromAssetSN" field.
func FromAssetSNGTE(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGTE(FieldFromAssetSN, v))
}

// FromAssetSNLT applies the LT predicate on the "FromAssetSN" field.
func FromAssetSNLT(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLT(FieldFromAssetSN, v))
}

// FromAssetSNLTE applies the LTE predicate on the "FromAssetSN" field.
func FromAssetSNLTE(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLTE(FieldFromAssetSN, v))
}

// ToAssetSNEQ applies the EQ predicate on the "ToAssetSN" field.
func ToAssetSNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldToAssetSN, v))
}

// ToAssetSNNEQ applies the NEQ predicate on the "ToAssetSN" field.
func ToAssetSNNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldToAssetSN, v))
}

// ToAssetSNIn applies the In predicate on the "ToAssetSN" field.
func ToAssetSNIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldToAssetSN, vs...))
}

// ToAssetSNNotIn applies the NotIn predicate on the "ToAssetSN" field.
func ToAssetSNNotIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldToAssetSN, vs...))
}

// ToAssetSNGT applies the GT predicate on the "ToAssetSN" field.
func ToAssetSNGT(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGT(FieldToAssetSN, v))
}

// ToAssetSNGTE applies the GTE predicate on the "ToAssetSN" field.
func ToAssetSNGTE(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGTE(FieldToAssetSN, v))
}

// ToAssetSNLT applies the LT predicate on the "ToAssetSN" field.
func ToAssetSNLT(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLT(FieldToAssetSN, v))
}

// ToAssetSNLTE applies the LTE predicate on the "ToAssetSN" field.
func ToAssetSNLTE(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLTE(FieldToAssetSN, v))
}

// FromDepartmentLocationIDEQ applies the EQ predicate on the "FromDepartmentLocationID" field.
func FromDepartmentLocationIDEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldFromDepartmentLocationID, v))
}

// FromDepartmentLocationIDNEQ applies the NEQ predicate on the "FromDepartmentLocationID" field.
func FromDepartmentLocationIDNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldFromDepartmentLocationID, v))
}

// FromDepartmentLocationIDIn applies the In predicate on the "FromDepartmentLocationID" field.
func FromDepartmentLocationIDIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldFromDepartmentLocationID, vs...))
}

// FromDepartmentLocationIDNotIn applies the NotIn predicate on the "FromDepartmentLocationID" field.
func FromDepartmentLocationIDNotIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldFromDepartmentLocationID, vs...))
}

// ToDepartmentLocationIDEQ applies the EQ predicate on the "ToDepartmentLocationID" field.
func ToDepartmentLocationIDEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldToDepartmentLocationID, v))
}

// ToDepartmentLocationIDNEQ applies the NEQ predicate on the "ToDepartmentLocationID" field.
func ToDepartmentLocationIDNEQ(v int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldToDepartmentLocationID, v))
}

// ToDepartmentLocationIDIn applies the In predicate on the "ToDepartmentLocationID" field.
func ToDepartmentLocationIDIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldToDepartmentLocationID, vs...))
}

// ToDepartmentLocationIDNotIn applies the NotIn predicate on the "ToDepartmentLocationID" field.
func ToDepartmentLocationIDNotIn(vs ...int) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldToDepartmentLocationID, vs...))
}

// TransferDateEQ applies the EQ predicate on the "TransferDate" field.
func TransferDateEQ(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldEQ(FieldTransferDate, v))
}

// TransferDateNEQ applies the NEQ predicate on the "TransferDate" field.
func TransferDateNEQ(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNEQ(FieldTransferDate, v))
}

// TransferDateIn applies the In predicate on the "TransferDate" field.
func TransferDateIn(vs ...time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldIn(FieldTransferDate, vs...))
}

// TransferDateNotIn applies the NotIn predicate on the "TransferDate" field.
func TransferDateNotIn(vs ...time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldNotIn(FieldTransferDate, vs...))
}

// TransferDateGT applies the GT predicate on the "TransferDate" field.
func TransferDateGT(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGT(FieldTransferDate, v))
}

// TransferDateGTE applies the GTE predicate on the "TransferDate" field.
func TransferDateGTE(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldGTE(FieldTransferDate, v))
}

// TransferDateLT applies the LT predicate on the "TransferDate" field.
func TransferDateLT(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLT(FieldTransferDate, v))
}

// TransferDateLTE applies the LTE predicate on the "TransferDate" field.
func TransferDateLTE(v time.Time) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(sql.FieldLTE(FieldTransferDate, v))
}

// HasAsset applies the HasEdge predicate on the "Asset" edge.
func HasAsset() predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "Asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.Asset) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromDepartmentLocation applies the HasEdge predicate on the "FromDepartmentLocation" edge.
func HasFromDepartmentLocation() predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromDepartmentLocationTable, FromDepartmentLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromDepartmentLocationWith applies the HasEdge predicate on the "FromDepartmentLocation" edge with a given conditions (other predicates).
func HasFromDepartmentLocationWith(preds ...predicate.DepartmentLocation) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromDepartmentLocationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromDepartmentLocationTable, FromDepartmentLocationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToDepartmentLocation applies the HasEdge predicate on the "ToDepartmentLocation" edge.
func HasToDepartmentLocation() predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToDepartmentLocationTable, ToDepartmentLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToDepartmentLocationWith applies the HasEdge predicate on the "ToDepartmentLocation" edge with a given conditions (other predicates).
func HasToDepartmentLocationWith(preds ...predicate.DepartmentLocation) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToDepartmentLocationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToDepartmentLocationTable, ToDepartmentLocationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetTransferLog) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetTransferLog) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetTransferLog) predicate.AssetTransferLog {
	return predicate.AssetTransferLog(func(s *sql.Selector) {
		p(s.Not())
	})
}

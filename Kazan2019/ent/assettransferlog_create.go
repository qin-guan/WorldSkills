// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
)

// AssetTransferLogCreate is the builder for creating a AssetTransferLog entity.
type AssetTransferLogCreate struct {
	config
	mutation *AssetTransferLogMutation
	hooks    []Hook
}

// SetAssetID sets the "AssetID" field.
func (atlc *AssetTransferLogCreate) SetAssetID(i int) *AssetTransferLogCreate {
	atlc.mutation.SetAssetID(i)
	return atlc
}

// SetFromAssetSN sets the "FromAssetSN" field.
func (atlc *AssetTransferLogCreate) SetFromAssetSN(i int) *AssetTransferLogCreate {
	atlc.mutation.SetFromAssetSN(i)
	return atlc
}

// SetToAssetSN sets the "ToAssetSN" field.
func (atlc *AssetTransferLogCreate) SetToAssetSN(i int) *AssetTransferLogCreate {
	atlc.mutation.SetToAssetSN(i)
	return atlc
}

// SetFromDepartmentLocationID sets the "FromDepartmentLocationID" field.
func (atlc *AssetTransferLogCreate) SetFromDepartmentLocationID(i int) *AssetTransferLogCreate {
	atlc.mutation.SetFromDepartmentLocationID(i)
	return atlc
}

// SetToDepartmentLocationID sets the "ToDepartmentLocationID" field.
func (atlc *AssetTransferLogCreate) SetToDepartmentLocationID(i int) *AssetTransferLogCreate {
	atlc.mutation.SetToDepartmentLocationID(i)
	return atlc
}

// SetTransferDate sets the "TransferDate" field.
func (atlc *AssetTransferLogCreate) SetTransferDate(t time.Time) *AssetTransferLogCreate {
	atlc.mutation.SetTransferDate(t)
	return atlc
}

// SetID sets the "id" field.
func (atlc *AssetTransferLogCreate) SetID(i int) *AssetTransferLogCreate {
	atlc.mutation.SetID(i)
	return atlc
}

// SetAsset sets the "Asset" edge to the Asset entity.
func (atlc *AssetTransferLogCreate) SetAsset(a *Asset) *AssetTransferLogCreate {
	return atlc.SetAssetID(a.ID)
}

// SetFromDepartmentLocation sets the "FromDepartmentLocation" edge to the DepartmentLocation entity.
func (atlc *AssetTransferLogCreate) SetFromDepartmentLocation(d *DepartmentLocation) *AssetTransferLogCreate {
	return atlc.SetFromDepartmentLocationID(d.ID)
}

// SetToDepartmentLocation sets the "ToDepartmentLocation" edge to the DepartmentLocation entity.
func (atlc *AssetTransferLogCreate) SetToDepartmentLocation(d *DepartmentLocation) *AssetTransferLogCreate {
	return atlc.SetToDepartmentLocationID(d.ID)
}

// Mutation returns the AssetTransferLogMutation object of the builder.
func (atlc *AssetTransferLogCreate) Mutation() *AssetTransferLogMutation {
	return atlc.mutation
}

// Save creates the AssetTransferLog in the database.
func (atlc *AssetTransferLogCreate) Save(ctx context.Context) (*AssetTransferLog, error) {
	return withHooks[*AssetTransferLog, AssetTransferLogMutation](ctx, atlc.sqlSave, atlc.mutation, atlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atlc *AssetTransferLogCreate) SaveX(ctx context.Context) *AssetTransferLog {
	v, err := atlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atlc *AssetTransferLogCreate) Exec(ctx context.Context) error {
	_, err := atlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atlc *AssetTransferLogCreate) ExecX(ctx context.Context) {
	if err := atlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atlc *AssetTransferLogCreate) check() error {
	if _, ok := atlc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "AssetID", err: errors.New(`ent: missing required field "AssetTransferLog.AssetID"`)}
	}
	if _, ok := atlc.mutation.FromAssetSN(); !ok {
		return &ValidationError{Name: "FromAssetSN", err: errors.New(`ent: missing required field "AssetTransferLog.FromAssetSN"`)}
	}
	if v, ok := atlc.mutation.FromAssetSN(); ok {
		if err := assettransferlog.FromAssetSNValidator(v); err != nil {
			return &ValidationError{Name: "FromAssetSN", err: fmt.Errorf(`ent: validator failed for field "AssetTransferLog.FromAssetSN": %w`, err)}
		}
	}
	if _, ok := atlc.mutation.ToAssetSN(); !ok {
		return &ValidationError{Name: "ToAssetSN", err: errors.New(`ent: missing required field "AssetTransferLog.ToAssetSN"`)}
	}
	if v, ok := atlc.mutation.ToAssetSN(); ok {
		if err := assettransferlog.ToAssetSNValidator(v); err != nil {
			return &ValidationError{Name: "ToAssetSN", err: fmt.Errorf(`ent: validator failed for field "AssetTransferLog.ToAssetSN": %w`, err)}
		}
	}
	if _, ok := atlc.mutation.FromDepartmentLocationID(); !ok {
		return &ValidationError{Name: "FromDepartmentLocationID", err: errors.New(`ent: missing required field "AssetTransferLog.FromDepartmentLocationID"`)}
	}
	if _, ok := atlc.mutation.ToDepartmentLocationID(); !ok {
		return &ValidationError{Name: "ToDepartmentLocationID", err: errors.New(`ent: missing required field "AssetTransferLog.ToDepartmentLocationID"`)}
	}
	if _, ok := atlc.mutation.TransferDate(); !ok {
		return &ValidationError{Name: "TransferDate", err: errors.New(`ent: missing required field "AssetTransferLog.TransferDate"`)}
	}
	if _, ok := atlc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "Asset", err: errors.New(`ent: missing required edge "AssetTransferLog.Asset"`)}
	}
	if _, ok := atlc.mutation.FromDepartmentLocationID(); !ok {
		return &ValidationError{Name: "FromDepartmentLocation", err: errors.New(`ent: missing required edge "AssetTransferLog.FromDepartmentLocation"`)}
	}
	if _, ok := atlc.mutation.ToDepartmentLocationID(); !ok {
		return &ValidationError{Name: "ToDepartmentLocation", err: errors.New(`ent: missing required edge "AssetTransferLog.ToDepartmentLocation"`)}
	}
	return nil
}

func (atlc *AssetTransferLogCreate) sqlSave(ctx context.Context) (*AssetTransferLog, error) {
	if err := atlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	atlc.mutation.id = &_node.ID
	atlc.mutation.done = true
	return _node, nil
}

func (atlc *AssetTransferLogCreate) createSpec() (*AssetTransferLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetTransferLog{config: atlc.config}
		_spec = sqlgraph.NewCreateSpec(assettransferlog.Table, sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt))
	)
	if id, ok := atlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atlc.mutation.FromAssetSN(); ok {
		_spec.SetField(assettransferlog.FieldFromAssetSN, field.TypeInt, value)
		_node.FromAssetSN = value
	}
	if value, ok := atlc.mutation.ToAssetSN(); ok {
		_spec.SetField(assettransferlog.FieldToAssetSN, field.TypeInt, value)
		_node.ToAssetSN = value
	}
	if value, ok := atlc.mutation.TransferDate(); ok {
		_spec.SetField(assettransferlog.FieldTransferDate, field.TypeTime, value)
		_node.TransferDate = value
	}
	if nodes := atlc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.AssetTable,
			Columns: []string{assettransferlog.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atlc.mutation.FromDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.FromDepartmentLocationTable,
			Columns: []string{assettransferlog.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromDepartmentLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atlc.mutation.ToDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.ToDepartmentLocationTable,
			Columns: []string{assettransferlog.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToDepartmentLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetTransferLogCreateBulk is the builder for creating many AssetTransferLog entities in bulk.
type AssetTransferLogCreateBulk struct {
	config
	builders []*AssetTransferLogCreate
}

// Save creates the AssetTransferLog entities in the database.
func (atlcb *AssetTransferLogCreateBulk) Save(ctx context.Context) ([]*AssetTransferLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atlcb.builders))
	nodes := make([]*AssetTransferLog, len(atlcb.builders))
	mutators := make([]Mutator, len(atlcb.builders))
	for i := range atlcb.builders {
		func(i int, root context.Context) {
			builder := atlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetTransferLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atlcb *AssetTransferLogCreateBulk) SaveX(ctx context.Context) []*AssetTransferLog {
	v, err := atlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atlcb *AssetTransferLogCreateBulk) Exec(ctx context.Context) error {
	_, err := atlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atlcb *AssetTransferLogCreateBulk) ExecX(ctx context.Context) {
	if err := atlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/predicate"
)

// AssetTransferLogQuery is the builder for querying AssetTransferLog entities.
type AssetTransferLogQuery struct {
	config
	ctx                        *QueryContext
	order                      []OrderFunc
	inters                     []Interceptor
	predicates                 []predicate.AssetTransferLog
	withAsset                  *AssetQuery
	withFromDepartmentLocation *DepartmentLocationQuery
	withToDepartmentLocation   *DepartmentLocationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetTransferLogQuery builder.
func (atlq *AssetTransferLogQuery) Where(ps ...predicate.AssetTransferLog) *AssetTransferLogQuery {
	atlq.predicates = append(atlq.predicates, ps...)
	return atlq
}

// Limit the number of records to be returned by this query.
func (atlq *AssetTransferLogQuery) Limit(limit int) *AssetTransferLogQuery {
	atlq.ctx.Limit = &limit
	return atlq
}

// Offset to start from.
func (atlq *AssetTransferLogQuery) Offset(offset int) *AssetTransferLogQuery {
	atlq.ctx.Offset = &offset
	return atlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (atlq *AssetTransferLogQuery) Unique(unique bool) *AssetTransferLogQuery {
	atlq.ctx.Unique = &unique
	return atlq
}

// Order specifies how the records should be ordered.
func (atlq *AssetTransferLogQuery) Order(o ...OrderFunc) *AssetTransferLogQuery {
	atlq.order = append(atlq.order, o...)
	return atlq
}

// QueryAsset chains the current query on the "Asset" edge.
func (atlq *AssetTransferLogQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: atlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferlog.Table, assettransferlog.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferlog.AssetTable, assettransferlog.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFromDepartmentLocation chains the current query on the "FromDepartmentLocation" edge.
func (atlq *AssetTransferLogQuery) QueryFromDepartmentLocation() *DepartmentLocationQuery {
	query := (&DepartmentLocationClient{config: atlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferlog.Table, assettransferlog.FieldID, selector),
			sqlgraph.To(departmentlocation.Table, departmentlocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferlog.FromDepartmentLocationTable, assettransferlog.FromDepartmentLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(atlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToDepartmentLocation chains the current query on the "ToDepartmentLocation" edge.
func (atlq *AssetTransferLogQuery) QueryToDepartmentLocation() *DepartmentLocationQuery {
	query := (&DepartmentLocationClient{config: atlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferlog.Table, assettransferlog.FieldID, selector),
			sqlgraph.To(departmentlocation.Table, departmentlocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferlog.ToDepartmentLocationTable, assettransferlog.ToDepartmentLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(atlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetTransferLog entity from the query.
// Returns a *NotFoundError when no AssetTransferLog was found.
func (atlq *AssetTransferLogQuery) First(ctx context.Context) (*AssetTransferLog, error) {
	nodes, err := atlq.Limit(1).All(setContextOp(ctx, atlq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assettransferlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) FirstX(ctx context.Context) *AssetTransferLog {
	node, err := atlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetTransferLog ID from the query.
// Returns a *NotFoundError when no AssetTransferLog ID was found.
func (atlq *AssetTransferLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = atlq.Limit(1).IDs(setContextOp(ctx, atlq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assettransferlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) FirstIDX(ctx context.Context) int {
	id, err := atlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetTransferLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetTransferLog entity is found.
// Returns a *NotFoundError when no AssetTransferLog entities are found.
func (atlq *AssetTransferLogQuery) Only(ctx context.Context) (*AssetTransferLog, error) {
	nodes, err := atlq.Limit(2).All(setContextOp(ctx, atlq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assettransferlog.Label}
	default:
		return nil, &NotSingularError{assettransferlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) OnlyX(ctx context.Context) *AssetTransferLog {
	node, err := atlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetTransferLog ID in the query.
// Returns a *NotSingularError when more than one AssetTransferLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (atlq *AssetTransferLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = atlq.Limit(2).IDs(setContextOp(ctx, atlq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assettransferlog.Label}
	default:
		err = &NotSingularError{assettransferlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := atlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetTransferLogs.
func (atlq *AssetTransferLogQuery) All(ctx context.Context) ([]*AssetTransferLog, error) {
	ctx = setContextOp(ctx, atlq.ctx, "All")
	if err := atlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetTransferLog, *AssetTransferLogQuery]()
	return withInterceptors[[]*AssetTransferLog](ctx, atlq, qr, atlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) AllX(ctx context.Context) []*AssetTransferLog {
	nodes, err := atlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetTransferLog IDs.
func (atlq *AssetTransferLogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if atlq.ctx.Unique == nil && atlq.path != nil {
		atlq.Unique(true)
	}
	ctx = setContextOp(ctx, atlq.ctx, "IDs")
	if err = atlq.Select(assettransferlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) IDsX(ctx context.Context) []int {
	ids, err := atlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (atlq *AssetTransferLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, atlq.ctx, "Count")
	if err := atlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, atlq, querierCount[*AssetTransferLogQuery](), atlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) CountX(ctx context.Context) int {
	count, err := atlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (atlq *AssetTransferLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, atlq.ctx, "Exist")
	switch _, err := atlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (atlq *AssetTransferLogQuery) ExistX(ctx context.Context) bool {
	exist, err := atlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetTransferLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (atlq *AssetTransferLogQuery) Clone() *AssetTransferLogQuery {
	if atlq == nil {
		return nil
	}
	return &AssetTransferLogQuery{
		config:                     atlq.config,
		ctx:                        atlq.ctx.Clone(),
		order:                      append([]OrderFunc{}, atlq.order...),
		inters:                     append([]Interceptor{}, atlq.inters...),
		predicates:                 append([]predicate.AssetTransferLog{}, atlq.predicates...),
		withAsset:                  atlq.withAsset.Clone(),
		withFromDepartmentLocation: atlq.withFromDepartmentLocation.Clone(),
		withToDepartmentLocation:   atlq.withToDepartmentLocation.Clone(),
		// clone intermediate query.
		sql:  atlq.sql.Clone(),
		path: atlq.path,
	}
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "Asset" edge. The optional arguments are used to configure the query builder of the edge.
func (atlq *AssetTransferLogQuery) WithAsset(opts ...func(*AssetQuery)) *AssetTransferLogQuery {
	query := (&AssetClient{config: atlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atlq.withAsset = query
	return atlq
}

// WithFromDepartmentLocation tells the query-builder to eager-load the nodes that are connected to
// the "FromDepartmentLocation" edge. The optional arguments are used to configure the query builder of the edge.
func (atlq *AssetTransferLogQuery) WithFromDepartmentLocation(opts ...func(*DepartmentLocationQuery)) *AssetTransferLogQuery {
	query := (&DepartmentLocationClient{config: atlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atlq.withFromDepartmentLocation = query
	return atlq
}

// WithToDepartmentLocation tells the query-builder to eager-load the nodes that are connected to
// the "ToDepartmentLocation" edge. The optional arguments are used to configure the query builder of the edge.
func (atlq *AssetTransferLogQuery) WithToDepartmentLocation(opts ...func(*DepartmentLocationQuery)) *AssetTransferLogQuery {
	query := (&DepartmentLocationClient{config: atlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atlq.withToDepartmentLocation = query
	return atlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AssetID int `json:"AssetID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetTransferLog.Query().
//		GroupBy(assettransferlog.FieldAssetID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (atlq *AssetTransferLogQuery) GroupBy(field string, fields ...string) *AssetTransferLogGroupBy {
	atlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetTransferLogGroupBy{build: atlq}
	grbuild.flds = &atlq.ctx.Fields
	grbuild.label = assettransferlog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AssetID int `json:"AssetID,omitempty"`
//	}
//
//	client.AssetTransferLog.Query().
//		Select(assettransferlog.FieldAssetID).
//		Scan(ctx, &v)
func (atlq *AssetTransferLogQuery) Select(fields ...string) *AssetTransferLogSelect {
	atlq.ctx.Fields = append(atlq.ctx.Fields, fields...)
	sbuild := &AssetTransferLogSelect{AssetTransferLogQuery: atlq}
	sbuild.label = assettransferlog.Label
	sbuild.flds, sbuild.scan = &atlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetTransferLogSelect configured with the given aggregations.
func (atlq *AssetTransferLogQuery) Aggregate(fns ...AggregateFunc) *AssetTransferLogSelect {
	return atlq.Select().Aggregate(fns...)
}

func (atlq *AssetTransferLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range atlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, atlq); err != nil {
				return err
			}
		}
	}
	for _, f := range atlq.ctx.Fields {
		if !assettransferlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if atlq.path != nil {
		prev, err := atlq.path(ctx)
		if err != nil {
			return err
		}
		atlq.sql = prev
	}
	return nil
}

func (atlq *AssetTransferLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetTransferLog, error) {
	var (
		nodes       = []*AssetTransferLog{}
		_spec       = atlq.querySpec()
		loadedTypes = [3]bool{
			atlq.withAsset != nil,
			atlq.withFromDepartmentLocation != nil,
			atlq.withToDepartmentLocation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetTransferLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetTransferLog{config: atlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, atlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := atlq.withAsset; query != nil {
		if err := atlq.loadAsset(ctx, query, nodes, nil,
			func(n *AssetTransferLog, e *Asset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	if query := atlq.withFromDepartmentLocation; query != nil {
		if err := atlq.loadFromDepartmentLocation(ctx, query, nodes, nil,
			func(n *AssetTransferLog, e *DepartmentLocation) { n.Edges.FromDepartmentLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := atlq.withToDepartmentLocation; query != nil {
		if err := atlq.loadToDepartmentLocation(ctx, query, nodes, nil,
			func(n *AssetTransferLog, e *DepartmentLocation) { n.Edges.ToDepartmentLocation = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (atlq *AssetTransferLogQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*AssetTransferLog, init func(*AssetTransferLog), assign func(*AssetTransferLog, *Asset)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AssetTransferLog)
	for i := range nodes {
		fk := nodes[i].AssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "AssetID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atlq *AssetTransferLogQuery) loadFromDepartmentLocation(ctx context.Context, query *DepartmentLocationQuery, nodes []*AssetTransferLog, init func(*AssetTransferLog), assign func(*AssetTransferLog, *DepartmentLocation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AssetTransferLog)
	for i := range nodes {
		fk := nodes[i].FromDepartmentLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(departmentlocation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "FromDepartmentLocationID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atlq *AssetTransferLogQuery) loadToDepartmentLocation(ctx context.Context, query *DepartmentLocationQuery, nodes []*AssetTransferLog, init func(*AssetTransferLog), assign func(*AssetTransferLog, *DepartmentLocation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AssetTransferLog)
	for i := range nodes {
		fk := nodes[i].ToDepartmentLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(departmentlocation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ToDepartmentLocationID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (atlq *AssetTransferLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := atlq.querySpec()
	_spec.Node.Columns = atlq.ctx.Fields
	if len(atlq.ctx.Fields) > 0 {
		_spec.Unique = atlq.ctx.Unique != nil && *atlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, atlq.driver, _spec)
}

func (atlq *AssetTransferLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assettransferlog.Table, assettransferlog.Columns, sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt))
	_spec.From = atlq.sql
	if unique := atlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if atlq.path != nil {
		_spec.Unique = true
	}
	if fields := atlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransferlog.FieldID)
		for i := range fields {
			if fields[i] != assettransferlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := atlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := atlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := atlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := atlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (atlq *AssetTransferLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(atlq.driver.Dialect())
	t1 := builder.Table(assettransferlog.Table)
	columns := atlq.ctx.Fields
	if len(columns) == 0 {
		columns = assettransferlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if atlq.sql != nil {
		selector = atlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if atlq.ctx.Unique != nil && *atlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range atlq.predicates {
		p(selector)
	}
	for _, p := range atlq.order {
		p(selector)
	}
	if offset := atlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := atlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AssetTransferLogGroupBy is the group-by builder for AssetTransferLog entities.
type AssetTransferLogGroupBy struct {
	selector
	build *AssetTransferLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atlgb *AssetTransferLogGroupBy) Aggregate(fns ...AggregateFunc) *AssetTransferLogGroupBy {
	atlgb.fns = append(atlgb.fns, fns...)
	return atlgb
}

// Scan applies the selector query and scans the result into the given value.
func (atlgb *AssetTransferLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atlgb.build.ctx, "GroupBy")
	if err := atlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetTransferLogQuery, *AssetTransferLogGroupBy](ctx, atlgb.build, atlgb, atlgb.build.inters, v)
}

func (atlgb *AssetTransferLogGroupBy) sqlScan(ctx context.Context, root *AssetTransferLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(atlgb.fns))
	for _, fn := range atlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*atlgb.flds)+len(atlgb.fns))
		for _, f := range *atlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*atlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetTransferLogSelect is the builder for selecting fields of AssetTransferLog entities.
type AssetTransferLogSelect struct {
	*AssetTransferLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (atls *AssetTransferLogSelect) Aggregate(fns ...AggregateFunc) *AssetTransferLogSelect {
	atls.fns = append(atls.fns, fns...)
	return atls
}

// Scan applies the selector query and scans the result into the given value.
func (atls *AssetTransferLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atls.ctx, "Select")
	if err := atls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetTransferLogQuery, *AssetTransferLogSelect](ctx, atls.AssetTransferLogQuery, atls, atls.inters, v)
}

func (atls *AssetTransferLogSelect) sqlScan(ctx context.Context, root *AssetTransferLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(atls.fns))
	for _, fn := range atls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*atls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

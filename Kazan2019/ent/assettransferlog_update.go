// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/predicate"
)

// AssetTransferLogUpdate is the builder for updating AssetTransferLog entities.
type AssetTransferLogUpdate struct {
	config
	hooks    []Hook
	mutation *AssetTransferLogMutation
}

// Where appends a list predicates to the AssetTransferLogUpdate builder.
func (atlu *AssetTransferLogUpdate) Where(ps ...predicate.AssetTransferLog) *AssetTransferLogUpdate {
	atlu.mutation.Where(ps...)
	return atlu
}

// SetAssetID sets the "AssetID" field.
func (atlu *AssetTransferLogUpdate) SetAssetID(i int) *AssetTransferLogUpdate {
	atlu.mutation.SetAssetID(i)
	return atlu
}

// SetFromAssetSN sets the "FromAssetSN" field.
func (atlu *AssetTransferLogUpdate) SetFromAssetSN(i int) *AssetTransferLogUpdate {
	atlu.mutation.ResetFromAssetSN()
	atlu.mutation.SetFromAssetSN(i)
	return atlu
}

// AddFromAssetSN adds i to the "FromAssetSN" field.
func (atlu *AssetTransferLogUpdate) AddFromAssetSN(i int) *AssetTransferLogUpdate {
	atlu.mutation.AddFromAssetSN(i)
	return atlu
}

// SetToAssetSN sets the "ToAssetSN" field.
func (atlu *AssetTransferLogUpdate) SetToAssetSN(i int) *AssetTransferLogUpdate {
	atlu.mutation.ResetToAssetSN()
	atlu.mutation.SetToAssetSN(i)
	return atlu
}

// AddToAssetSN adds i to the "ToAssetSN" field.
func (atlu *AssetTransferLogUpdate) AddToAssetSN(i int) *AssetTransferLogUpdate {
	atlu.mutation.AddToAssetSN(i)
	return atlu
}

// SetFromDepartmentLocationID sets the "FromDepartmentLocationID" field.
func (atlu *AssetTransferLogUpdate) SetFromDepartmentLocationID(i int) *AssetTransferLogUpdate {
	atlu.mutation.SetFromDepartmentLocationID(i)
	return atlu
}

// SetToDepartmentLocationID sets the "ToDepartmentLocationID" field.
func (atlu *AssetTransferLogUpdate) SetToDepartmentLocationID(i int) *AssetTransferLogUpdate {
	atlu.mutation.SetToDepartmentLocationID(i)
	return atlu
}

// SetTransferDate sets the "TransferDate" field.
func (atlu *AssetTransferLogUpdate) SetTransferDate(t time.Time) *AssetTransferLogUpdate {
	atlu.mutation.SetTransferDate(t)
	return atlu
}

// SetAsset sets the "Asset" edge to the Asset entity.
func (atlu *AssetTransferLogUpdate) SetAsset(a *Asset) *AssetTransferLogUpdate {
	return atlu.SetAssetID(a.ID)
}

// SetFromDepartmentLocation sets the "FromDepartmentLocation" edge to the DepartmentLocation entity.
func (atlu *AssetTransferLogUpdate) SetFromDepartmentLocation(d *DepartmentLocation) *AssetTransferLogUpdate {
	return atlu.SetFromDepartmentLocationID(d.ID)
}

// SetToDepartmentLocation sets the "ToDepartmentLocation" edge to the DepartmentLocation entity.
func (atlu *AssetTransferLogUpdate) SetToDepartmentLocation(d *DepartmentLocation) *AssetTransferLogUpdate {
	return atlu.SetToDepartmentLocationID(d.ID)
}

// Mutation returns the AssetTransferLogMutation object of the builder.
func (atlu *AssetTransferLogUpdate) Mutation() *AssetTransferLogMutation {
	return atlu.mutation
}

// ClearAsset clears the "Asset" edge to the Asset entity.
func (atlu *AssetTransferLogUpdate) ClearAsset() *AssetTransferLogUpdate {
	atlu.mutation.ClearAsset()
	return atlu
}

// ClearFromDepartmentLocation clears the "FromDepartmentLocation" edge to the DepartmentLocation entity.
func (atlu *AssetTransferLogUpdate) ClearFromDepartmentLocation() *AssetTransferLogUpdate {
	atlu.mutation.ClearFromDepartmentLocation()
	return atlu
}

// ClearToDepartmentLocation clears the "ToDepartmentLocation" edge to the DepartmentLocation entity.
func (atlu *AssetTransferLogUpdate) ClearToDepartmentLocation() *AssetTransferLogUpdate {
	atlu.mutation.ClearToDepartmentLocation()
	return atlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atlu *AssetTransferLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AssetTransferLogMutation](ctx, atlu.sqlSave, atlu.mutation, atlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atlu *AssetTransferLogUpdate) SaveX(ctx context.Context) int {
	affected, err := atlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atlu *AssetTransferLogUpdate) Exec(ctx context.Context) error {
	_, err := atlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atlu *AssetTransferLogUpdate) ExecX(ctx context.Context) {
	if err := atlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atlu *AssetTransferLogUpdate) check() error {
	if v, ok := atlu.mutation.FromAssetSN(); ok {
		if err := assettransferlog.FromAssetSNValidator(v); err != nil {
			return &ValidationError{Name: "FromAssetSN", err: fmt.Errorf(`ent: validator failed for field "AssetTransferLog.FromAssetSN": %w`, err)}
		}
	}
	if v, ok := atlu.mutation.ToAssetSN(); ok {
		if err := assettransferlog.ToAssetSNValidator(v); err != nil {
			return &ValidationError{Name: "ToAssetSN", err: fmt.Errorf(`ent: validator failed for field "AssetTransferLog.ToAssetSN": %w`, err)}
		}
	}
	if _, ok := atlu.mutation.AssetID(); atlu.mutation.AssetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetTransferLog.Asset"`)
	}
	if _, ok := atlu.mutation.FromDepartmentLocationID(); atlu.mutation.FromDepartmentLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetTransferLog.FromDepartmentLocation"`)
	}
	if _, ok := atlu.mutation.ToDepartmentLocationID(); atlu.mutation.ToDepartmentLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetTransferLog.ToDepartmentLocation"`)
	}
	return nil
}

func (atlu *AssetTransferLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assettransferlog.Table, assettransferlog.Columns, sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt))
	if ps := atlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atlu.mutation.FromAssetSN(); ok {
		_spec.SetField(assettransferlog.FieldFromAssetSN, field.TypeInt, value)
	}
	if value, ok := atlu.mutation.AddedFromAssetSN(); ok {
		_spec.AddField(assettransferlog.FieldFromAssetSN, field.TypeInt, value)
	}
	if value, ok := atlu.mutation.ToAssetSN(); ok {
		_spec.SetField(assettransferlog.FieldToAssetSN, field.TypeInt, value)
	}
	if value, ok := atlu.mutation.AddedToAssetSN(); ok {
		_spec.AddField(assettransferlog.FieldToAssetSN, field.TypeInt, value)
	}
	if value, ok := atlu.mutation.TransferDate(); ok {
		_spec.SetField(assettransferlog.FieldTransferDate, field.TypeTime, value)
	}
	if atlu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.AssetTable,
			Columns: []string{assettransferlog.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atlu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.AssetTable,
			Columns: []string{assettransferlog.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atlu.mutation.FromDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.FromDepartmentLocationTable,
			Columns: []string{assettransferlog.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atlu.mutation.FromDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.FromDepartmentLocationTable,
			Columns: []string{assettransferlog.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atlu.mutation.ToDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.ToDepartmentLocationTable,
			Columns: []string{assettransferlog.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atlu.mutation.ToDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.ToDepartmentLocationTable,
			Columns: []string{assettransferlog.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransferlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atlu.mutation.done = true
	return n, nil
}

// AssetTransferLogUpdateOne is the builder for updating a single AssetTransferLog entity.
type AssetTransferLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetTransferLogMutation
}

// SetAssetID sets the "AssetID" field.
func (atluo *AssetTransferLogUpdateOne) SetAssetID(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.SetAssetID(i)
	return atluo
}

// SetFromAssetSN sets the "FromAssetSN" field.
func (atluo *AssetTransferLogUpdateOne) SetFromAssetSN(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.ResetFromAssetSN()
	atluo.mutation.SetFromAssetSN(i)
	return atluo
}

// AddFromAssetSN adds i to the "FromAssetSN" field.
func (atluo *AssetTransferLogUpdateOne) AddFromAssetSN(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.AddFromAssetSN(i)
	return atluo
}

// SetToAssetSN sets the "ToAssetSN" field.
func (atluo *AssetTransferLogUpdateOne) SetToAssetSN(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.ResetToAssetSN()
	atluo.mutation.SetToAssetSN(i)
	return atluo
}

// AddToAssetSN adds i to the "ToAssetSN" field.
func (atluo *AssetTransferLogUpdateOne) AddToAssetSN(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.AddToAssetSN(i)
	return atluo
}

// SetFromDepartmentLocationID sets the "FromDepartmentLocationID" field.
func (atluo *AssetTransferLogUpdateOne) SetFromDepartmentLocationID(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.SetFromDepartmentLocationID(i)
	return atluo
}

// SetToDepartmentLocationID sets the "ToDepartmentLocationID" field.
func (atluo *AssetTransferLogUpdateOne) SetToDepartmentLocationID(i int) *AssetTransferLogUpdateOne {
	atluo.mutation.SetToDepartmentLocationID(i)
	return atluo
}

// SetTransferDate sets the "TransferDate" field.
func (atluo *AssetTransferLogUpdateOne) SetTransferDate(t time.Time) *AssetTransferLogUpdateOne {
	atluo.mutation.SetTransferDate(t)
	return atluo
}

// SetAsset sets the "Asset" edge to the Asset entity.
func (atluo *AssetTransferLogUpdateOne) SetAsset(a *Asset) *AssetTransferLogUpdateOne {
	return atluo.SetAssetID(a.ID)
}

// SetFromDepartmentLocation sets the "FromDepartmentLocation" edge to the DepartmentLocation entity.
func (atluo *AssetTransferLogUpdateOne) SetFromDepartmentLocation(d *DepartmentLocation) *AssetTransferLogUpdateOne {
	return atluo.SetFromDepartmentLocationID(d.ID)
}

// SetToDepartmentLocation sets the "ToDepartmentLocation" edge to the DepartmentLocation entity.
func (atluo *AssetTransferLogUpdateOne) SetToDepartmentLocation(d *DepartmentLocation) *AssetTransferLogUpdateOne {
	return atluo.SetToDepartmentLocationID(d.ID)
}

// Mutation returns the AssetTransferLogMutation object of the builder.
func (atluo *AssetTransferLogUpdateOne) Mutation() *AssetTransferLogMutation {
	return atluo.mutation
}

// ClearAsset clears the "Asset" edge to the Asset entity.
func (atluo *AssetTransferLogUpdateOne) ClearAsset() *AssetTransferLogUpdateOne {
	atluo.mutation.ClearAsset()
	return atluo
}

// ClearFromDepartmentLocation clears the "FromDepartmentLocation" edge to the DepartmentLocation entity.
func (atluo *AssetTransferLogUpdateOne) ClearFromDepartmentLocation() *AssetTransferLogUpdateOne {
	atluo.mutation.ClearFromDepartmentLocation()
	return atluo
}

// ClearToDepartmentLocation clears the "ToDepartmentLocation" edge to the DepartmentLocation entity.
func (atluo *AssetTransferLogUpdateOne) ClearToDepartmentLocation() *AssetTransferLogUpdateOne {
	atluo.mutation.ClearToDepartmentLocation()
	return atluo
}

// Where appends a list predicates to the AssetTransferLogUpdate builder.
func (atluo *AssetTransferLogUpdateOne) Where(ps ...predicate.AssetTransferLog) *AssetTransferLogUpdateOne {
	atluo.mutation.Where(ps...)
	return atluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atluo *AssetTransferLogUpdateOne) Select(field string, fields ...string) *AssetTransferLogUpdateOne {
	atluo.fields = append([]string{field}, fields...)
	return atluo
}

// Save executes the query and returns the updated AssetTransferLog entity.
func (atluo *AssetTransferLogUpdateOne) Save(ctx context.Context) (*AssetTransferLog, error) {
	return withHooks[*AssetTransferLog, AssetTransferLogMutation](ctx, atluo.sqlSave, atluo.mutation, atluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atluo *AssetTransferLogUpdateOne) SaveX(ctx context.Context) *AssetTransferLog {
	node, err := atluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atluo *AssetTransferLogUpdateOne) Exec(ctx context.Context) error {
	_, err := atluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atluo *AssetTransferLogUpdateOne) ExecX(ctx context.Context) {
	if err := atluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atluo *AssetTransferLogUpdateOne) check() error {
	if v, ok := atluo.mutation.FromAssetSN(); ok {
		if err := assettransferlog.FromAssetSNValidator(v); err != nil {
			return &ValidationError{Name: "FromAssetSN", err: fmt.Errorf(`ent: validator failed for field "AssetTransferLog.FromAssetSN": %w`, err)}
		}
	}
	if v, ok := atluo.mutation.ToAssetSN(); ok {
		if err := assettransferlog.ToAssetSNValidator(v); err != nil {
			return &ValidationError{Name: "ToAssetSN", err: fmt.Errorf(`ent: validator failed for field "AssetTransferLog.ToAssetSN": %w`, err)}
		}
	}
	if _, ok := atluo.mutation.AssetID(); atluo.mutation.AssetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetTransferLog.Asset"`)
	}
	if _, ok := atluo.mutation.FromDepartmentLocationID(); atluo.mutation.FromDepartmentLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetTransferLog.FromDepartmentLocation"`)
	}
	if _, ok := atluo.mutation.ToDepartmentLocationID(); atluo.mutation.ToDepartmentLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetTransferLog.ToDepartmentLocation"`)
	}
	return nil
}

func (atluo *AssetTransferLogUpdateOne) sqlSave(ctx context.Context) (_node *AssetTransferLog, err error) {
	if err := atluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assettransferlog.Table, assettransferlog.Columns, sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt))
	id, ok := atluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetTransferLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransferlog.FieldID)
		for _, f := range fields {
			if !assettransferlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assettransferlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atluo.mutation.FromAssetSN(); ok {
		_spec.SetField(assettransferlog.FieldFromAssetSN, field.TypeInt, value)
	}
	if value, ok := atluo.mutation.AddedFromAssetSN(); ok {
		_spec.AddField(assettransferlog.FieldFromAssetSN, field.TypeInt, value)
	}
	if value, ok := atluo.mutation.ToAssetSN(); ok {
		_spec.SetField(assettransferlog.FieldToAssetSN, field.TypeInt, value)
	}
	if value, ok := atluo.mutation.AddedToAssetSN(); ok {
		_spec.AddField(assettransferlog.FieldToAssetSN, field.TypeInt, value)
	}
	if value, ok := atluo.mutation.TransferDate(); ok {
		_spec.SetField(assettransferlog.FieldTransferDate, field.TypeTime, value)
	}
	if atluo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.AssetTable,
			Columns: []string{assettransferlog.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atluo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.AssetTable,
			Columns: []string{assettransferlog.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atluo.mutation.FromDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.FromDepartmentLocationTable,
			Columns: []string{assettransferlog.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atluo.mutation.FromDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.FromDepartmentLocationTable,
			Columns: []string{assettransferlog.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atluo.mutation.ToDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.ToDepartmentLocationTable,
			Columns: []string{assettransferlog.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atluo.mutation.ToDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferlog.ToDepartmentLocationTable,
			Columns: []string{assettransferlog.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AssetTransferLog{config: atluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransferlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atluo.mutation.done = true
	return _node, nil
}

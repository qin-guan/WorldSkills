// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/department"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/location"
)

// DepartmentLocation is the model entity for the DepartmentLocation schema.
type DepartmentLocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DepartmentID holds the value of the "DepartmentID" field.
	DepartmentID int `json:"DepartmentID,omitempty"`
	// LocationID holds the value of the "LocationID" field.
	LocationID int `json:"LocationID,omitempty"`
	// EndDate holds the value of the "EndDate" field.
	EndDate time.Time `json:"EndDate,omitempty"`
	// StartDate holds the value of the "StartDate" field.
	StartDate time.Time `json:"StartDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DepartmentLocationQuery when eager-loading is set.
	Edges DepartmentLocationEdges `json:"edges"`
}

// DepartmentLocationEdges holds the relations/edges for other nodes in the graph.
type DepartmentLocationEdges struct {
	// Asset holds the value of the Asset edge.
	Asset []*Asset `json:"Asset,omitempty"`
	// FromDepartmentLocation holds the value of the FromDepartmentLocation edge.
	FromDepartmentLocation []*AssetTransferLog `json:"FromDepartmentLocation,omitempty"`
	// ToDepartmentLocation holds the value of the ToDepartmentLocation edge.
	ToDepartmentLocation []*AssetTransferLog `json:"ToDepartmentLocation,omitempty"`
	// Department holds the value of the Department edge.
	Department *Department `json:"Department,omitempty"`
	// Location holds the value of the Location edge.
	Location *Location `json:"Location,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading.
func (e DepartmentLocationEdges) AssetOrErr() ([]*Asset, error) {
	if e.loadedTypes[0] {
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "Asset"}
}

// FromDepartmentLocationOrErr returns the FromDepartmentLocation value or an error if the edge
// was not loaded in eager-loading.
func (e DepartmentLocationEdges) FromDepartmentLocationOrErr() ([]*AssetTransferLog, error) {
	if e.loadedTypes[1] {
		return e.FromDepartmentLocation, nil
	}
	return nil, &NotLoadedError{edge: "FromDepartmentLocation"}
}

// ToDepartmentLocationOrErr returns the ToDepartmentLocation value or an error if the edge
// was not loaded in eager-loading.
func (e DepartmentLocationEdges) ToDepartmentLocationOrErr() ([]*AssetTransferLog, error) {
	if e.loadedTypes[2] {
		return e.ToDepartmentLocation, nil
	}
	return nil, &NotLoadedError{edge: "ToDepartmentLocation"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepartmentLocationEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[3] {
		if e.Department == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "Department"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepartmentLocationEdges) LocationOrErr() (*Location, error) {
	if e.loadedTypes[4] {
		if e.Location == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "Location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DepartmentLocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case departmentlocation.FieldID, departmentlocation.FieldDepartmentID, departmentlocation.FieldLocationID:
			values[i] = new(sql.NullInt64)
		case departmentlocation.FieldEndDate, departmentlocation.FieldStartDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DepartmentLocation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DepartmentLocation fields.
func (dl *DepartmentLocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case departmentlocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dl.ID = int(value.Int64)
		case departmentlocation.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DepartmentID", values[i])
			} else if value.Valid {
				dl.DepartmentID = int(value.Int64)
			}
		case departmentlocation.FieldLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LocationID", values[i])
			} else if value.Valid {
				dl.LocationID = int(value.Int64)
			}
		case departmentlocation.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EndDate", values[i])
			} else if value.Valid {
				dl.EndDate = value.Time
			}
		case departmentlocation.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field StartDate", values[i])
			} else if value.Valid {
				dl.StartDate = value.Time
			}
		}
	}
	return nil
}

// QueryAsset queries the "Asset" edge of the DepartmentLocation entity.
func (dl *DepartmentLocation) QueryAsset() *AssetQuery {
	return NewDepartmentLocationClient(dl.config).QueryAsset(dl)
}

// QueryFromDepartmentLocation queries the "FromDepartmentLocation" edge of the DepartmentLocation entity.
func (dl *DepartmentLocation) QueryFromDepartmentLocation() *AssetTransferLogQuery {
	return NewDepartmentLocationClient(dl.config).QueryFromDepartmentLocation(dl)
}

// QueryToDepartmentLocation queries the "ToDepartmentLocation" edge of the DepartmentLocation entity.
func (dl *DepartmentLocation) QueryToDepartmentLocation() *AssetTransferLogQuery {
	return NewDepartmentLocationClient(dl.config).QueryToDepartmentLocation(dl)
}

// QueryDepartment queries the "Department" edge of the DepartmentLocation entity.
func (dl *DepartmentLocation) QueryDepartment() *DepartmentQuery {
	return NewDepartmentLocationClient(dl.config).QueryDepartment(dl)
}

// QueryLocation queries the "Location" edge of the DepartmentLocation entity.
func (dl *DepartmentLocation) QueryLocation() *LocationQuery {
	return NewDepartmentLocationClient(dl.config).QueryLocation(dl)
}

// Update returns a builder for updating this DepartmentLocation.
// Note that you need to call DepartmentLocation.Unwrap() before calling this method if this DepartmentLocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (dl *DepartmentLocation) Update() *DepartmentLocationUpdateOne {
	return NewDepartmentLocationClient(dl.config).UpdateOne(dl)
}

// Unwrap unwraps the DepartmentLocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dl *DepartmentLocation) Unwrap() *DepartmentLocation {
	_tx, ok := dl.config.driver.(*txDriver)
	if !ok {
		panic("ent: DepartmentLocation is not a transactional entity")
	}
	dl.config.driver = _tx.drv
	return dl
}

// String implements the fmt.Stringer.
func (dl *DepartmentLocation) String() string {
	var builder strings.Builder
	builder.WriteString("DepartmentLocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dl.ID))
	builder.WriteString("DepartmentID=")
	builder.WriteString(fmt.Sprintf("%v", dl.DepartmentID))
	builder.WriteString(", ")
	builder.WriteString("LocationID=")
	builder.WriteString(fmt.Sprintf("%v", dl.LocationID))
	builder.WriteString(", ")
	builder.WriteString("EndDate=")
	builder.WriteString(dl.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("StartDate=")
	builder.WriteString(dl.StartDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DepartmentLocations is a parsable slice of DepartmentLocation.
type DepartmentLocations []*DepartmentLocation

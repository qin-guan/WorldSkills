// Code generated by ent, DO NOT EDIT.

package departmentlocation

const (
	// Label holds the string label denoting the departmentlocation type in the database.
	Label = "department_location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldDepartmentID holds the string denoting the departmentid field in the database.
	FieldDepartmentID = "department_id"
	// FieldLocationID holds the string denoting the locationid field in the database.
	FieldLocationID = "location_id"
	// FieldEndDate holds the string denoting the enddate field in the database.
	FieldEndDate = "end_date"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "Asset"
	// EdgeFromDepartmentLocation holds the string denoting the fromdepartmentlocation edge name in mutations.
	EdgeFromDepartmentLocation = "FromDepartmentLocation"
	// EdgeToDepartmentLocation holds the string denoting the todepartmentlocation edge name in mutations.
	EdgeToDepartmentLocation = "ToDepartmentLocation"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "Department"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "Location"
	// Table holds the table name of the departmentlocation in the database.
	Table = "department_locations"
	// AssetTable is the table that holds the Asset relation/edge.
	AssetTable = "assets"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "assets"
	// AssetColumn is the table column denoting the Asset relation/edge.
	AssetColumn = "department_location_id"
	// FromDepartmentLocationTable is the table that holds the FromDepartmentLocation relation/edge.
	FromDepartmentLocationTable = "asset_transfer_logs"
	// FromDepartmentLocationInverseTable is the table name for the AssetTransferLog entity.
	// It exists in this package in order to avoid circular dependency with the "assettransferlog" package.
	FromDepartmentLocationInverseTable = "asset_transfer_logs"
	// FromDepartmentLocationColumn is the table column denoting the FromDepartmentLocation relation/edge.
	FromDepartmentLocationColumn = "from_department_location_id"
	// ToDepartmentLocationTable is the table that holds the ToDepartmentLocation relation/edge.
	ToDepartmentLocationTable = "asset_transfer_logs"
	// ToDepartmentLocationInverseTable is the table name for the AssetTransferLog entity.
	// It exists in this package in order to avoid circular dependency with the "assettransferlog" package.
	ToDepartmentLocationInverseTable = "asset_transfer_logs"
	// ToDepartmentLocationColumn is the table column denoting the ToDepartmentLocation relation/edge.
	ToDepartmentLocationColumn = "to_department_location_id"
	// DepartmentTable is the table that holds the Department relation/edge.
	DepartmentTable = "department_locations"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the Department relation/edge.
	DepartmentColumn = "department_id"
	// LocationTable is the table that holds the Location relation/edge.
	LocationTable = "department_locations"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "locations"
	// LocationColumn is the table column denoting the Location relation/edge.
	LocationColumn = "location_id"
)

// Columns holds all SQL columns for departmentlocation fields.
var Columns = []string{
	FieldID,
	FieldDepartmentID,
	FieldLocationID,
	FieldEndDate,
	FieldStartDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

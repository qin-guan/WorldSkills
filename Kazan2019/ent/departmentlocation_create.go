// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/department"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/location"
)

// DepartmentLocationCreate is the builder for creating a DepartmentLocation entity.
type DepartmentLocationCreate struct {
	config
	mutation *DepartmentLocationMutation
	hooks    []Hook
}

// SetDepartmentID sets the "DepartmentID" field.
func (dlc *DepartmentLocationCreate) SetDepartmentID(i int) *DepartmentLocationCreate {
	dlc.mutation.SetDepartmentID(i)
	return dlc
}

// SetLocationID sets the "LocationID" field.
func (dlc *DepartmentLocationCreate) SetLocationID(i int) *DepartmentLocationCreate {
	dlc.mutation.SetLocationID(i)
	return dlc
}

// SetEndDate sets the "EndDate" field.
func (dlc *DepartmentLocationCreate) SetEndDate(t time.Time) *DepartmentLocationCreate {
	dlc.mutation.SetEndDate(t)
	return dlc
}

// SetStartDate sets the "StartDate" field.
func (dlc *DepartmentLocationCreate) SetStartDate(t time.Time) *DepartmentLocationCreate {
	dlc.mutation.SetStartDate(t)
	return dlc
}

// SetID sets the "id" field.
func (dlc *DepartmentLocationCreate) SetID(i int) *DepartmentLocationCreate {
	dlc.mutation.SetID(i)
	return dlc
}

// AddAssetIDs adds the "Asset" edge to the Asset entity by IDs.
func (dlc *DepartmentLocationCreate) AddAssetIDs(ids ...int) *DepartmentLocationCreate {
	dlc.mutation.AddAssetIDs(ids...)
	return dlc
}

// AddAsset adds the "Asset" edges to the Asset entity.
func (dlc *DepartmentLocationCreate) AddAsset(a ...*Asset) *DepartmentLocationCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlc.AddAssetIDs(ids...)
}

// AddFromDepartmentLocationIDs adds the "FromDepartmentLocation" edge to the AssetTransferLog entity by IDs.
func (dlc *DepartmentLocationCreate) AddFromDepartmentLocationIDs(ids ...int) *DepartmentLocationCreate {
	dlc.mutation.AddFromDepartmentLocationIDs(ids...)
	return dlc
}

// AddFromDepartmentLocation adds the "FromDepartmentLocation" edges to the AssetTransferLog entity.
func (dlc *DepartmentLocationCreate) AddFromDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlc.AddFromDepartmentLocationIDs(ids...)
}

// AddToDepartmentLocationIDs adds the "ToDepartmentLocation" edge to the AssetTransferLog entity by IDs.
func (dlc *DepartmentLocationCreate) AddToDepartmentLocationIDs(ids ...int) *DepartmentLocationCreate {
	dlc.mutation.AddToDepartmentLocationIDs(ids...)
	return dlc
}

// AddToDepartmentLocation adds the "ToDepartmentLocation" edges to the AssetTransferLog entity.
func (dlc *DepartmentLocationCreate) AddToDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlc.AddToDepartmentLocationIDs(ids...)
}

// SetDepartment sets the "Department" edge to the Department entity.
func (dlc *DepartmentLocationCreate) SetDepartment(d *Department) *DepartmentLocationCreate {
	return dlc.SetDepartmentID(d.ID)
}

// SetLocation sets the "Location" edge to the Location entity.
func (dlc *DepartmentLocationCreate) SetLocation(l *Location) *DepartmentLocationCreate {
	return dlc.SetLocationID(l.ID)
}

// Mutation returns the DepartmentLocationMutation object of the builder.
func (dlc *DepartmentLocationCreate) Mutation() *DepartmentLocationMutation {
	return dlc.mutation
}

// Save creates the DepartmentLocation in the database.
func (dlc *DepartmentLocationCreate) Save(ctx context.Context) (*DepartmentLocation, error) {
	return withHooks[*DepartmentLocation, DepartmentLocationMutation](ctx, dlc.sqlSave, dlc.mutation, dlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dlc *DepartmentLocationCreate) SaveX(ctx context.Context) *DepartmentLocation {
	v, err := dlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlc *DepartmentLocationCreate) Exec(ctx context.Context) error {
	_, err := dlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlc *DepartmentLocationCreate) ExecX(ctx context.Context) {
	if err := dlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dlc *DepartmentLocationCreate) check() error {
	if _, ok := dlc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "DepartmentID", err: errors.New(`ent: missing required field "DepartmentLocation.DepartmentID"`)}
	}
	if _, ok := dlc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "LocationID", err: errors.New(`ent: missing required field "DepartmentLocation.LocationID"`)}
	}
	if _, ok := dlc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "EndDate", err: errors.New(`ent: missing required field "DepartmentLocation.EndDate"`)}
	}
	if _, ok := dlc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "StartDate", err: errors.New(`ent: missing required field "DepartmentLocation.StartDate"`)}
	}
	if _, ok := dlc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "Department", err: errors.New(`ent: missing required edge "DepartmentLocation.Department"`)}
	}
	if _, ok := dlc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "Location", err: errors.New(`ent: missing required edge "DepartmentLocation.Location"`)}
	}
	return nil
}

func (dlc *DepartmentLocationCreate) sqlSave(ctx context.Context) (*DepartmentLocation, error) {
	if err := dlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	dlc.mutation.id = &_node.ID
	dlc.mutation.done = true
	return _node, nil
}

func (dlc *DepartmentLocationCreate) createSpec() (*DepartmentLocation, *sqlgraph.CreateSpec) {
	var (
		_node = &DepartmentLocation{config: dlc.config}
		_spec = sqlgraph.NewCreateSpec(departmentlocation.Table, sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt))
	)
	if id, ok := dlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dlc.mutation.EndDate(); ok {
		_spec.SetField(departmentlocation.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := dlc.mutation.StartDate(); ok {
		_spec.SetField(departmentlocation.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if nodes := dlc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dlc.mutation.FromDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dlc.mutation.ToDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dlc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.DepartmentTable,
			Columns: []string{departmentlocation.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dlc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.LocationTable,
			Columns: []string{departmentlocation.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DepartmentLocationCreateBulk is the builder for creating many DepartmentLocation entities in bulk.
type DepartmentLocationCreateBulk struct {
	config
	builders []*DepartmentLocationCreate
}

// Save creates the DepartmentLocation entities in the database.
func (dlcb *DepartmentLocationCreateBulk) Save(ctx context.Context) ([]*DepartmentLocation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dlcb.builders))
	nodes := make([]*DepartmentLocation, len(dlcb.builders))
	mutators := make([]Mutator, len(dlcb.builders))
	for i := range dlcb.builders {
		func(i int, root context.Context) {
			builder := dlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepartmentLocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dlcb *DepartmentLocationCreateBulk) SaveX(ctx context.Context) []*DepartmentLocation {
	v, err := dlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlcb *DepartmentLocationCreateBulk) Exec(ctx context.Context) error {
	_, err := dlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlcb *DepartmentLocationCreateBulk) ExecX(ctx context.Context) {
	if err := dlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/asset"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/assettransferlog"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/department"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/departmentlocation"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/location"
	"github.com/qin-guan/WorldSkills/Kazan2019/ent/predicate"
)

// DepartmentLocationUpdate is the builder for updating DepartmentLocation entities.
type DepartmentLocationUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentLocationMutation
}

// Where appends a list predicates to the DepartmentLocationUpdate builder.
func (dlu *DepartmentLocationUpdate) Where(ps ...predicate.DepartmentLocation) *DepartmentLocationUpdate {
	dlu.mutation.Where(ps...)
	return dlu
}

// SetDepartmentID sets the "DepartmentID" field.
func (dlu *DepartmentLocationUpdate) SetDepartmentID(i int) *DepartmentLocationUpdate {
	dlu.mutation.SetDepartmentID(i)
	return dlu
}

// SetLocationID sets the "LocationID" field.
func (dlu *DepartmentLocationUpdate) SetLocationID(i int) *DepartmentLocationUpdate {
	dlu.mutation.SetLocationID(i)
	return dlu
}

// SetEndDate sets the "EndDate" field.
func (dlu *DepartmentLocationUpdate) SetEndDate(t time.Time) *DepartmentLocationUpdate {
	dlu.mutation.SetEndDate(t)
	return dlu
}

// SetStartDate sets the "StartDate" field.
func (dlu *DepartmentLocationUpdate) SetStartDate(t time.Time) *DepartmentLocationUpdate {
	dlu.mutation.SetStartDate(t)
	return dlu
}

// AddAssetIDs adds the "Asset" edge to the Asset entity by IDs.
func (dlu *DepartmentLocationUpdate) AddAssetIDs(ids ...int) *DepartmentLocationUpdate {
	dlu.mutation.AddAssetIDs(ids...)
	return dlu
}

// AddAsset adds the "Asset" edges to the Asset entity.
func (dlu *DepartmentLocationUpdate) AddAsset(a ...*Asset) *DepartmentLocationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlu.AddAssetIDs(ids...)
}

// AddFromDepartmentLocationIDs adds the "FromDepartmentLocation" edge to the AssetTransferLog entity by IDs.
func (dlu *DepartmentLocationUpdate) AddFromDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdate {
	dlu.mutation.AddFromDepartmentLocationIDs(ids...)
	return dlu
}

// AddFromDepartmentLocation adds the "FromDepartmentLocation" edges to the AssetTransferLog entity.
func (dlu *DepartmentLocationUpdate) AddFromDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlu.AddFromDepartmentLocationIDs(ids...)
}

// AddToDepartmentLocationIDs adds the "ToDepartmentLocation" edge to the AssetTransferLog entity by IDs.
func (dlu *DepartmentLocationUpdate) AddToDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdate {
	dlu.mutation.AddToDepartmentLocationIDs(ids...)
	return dlu
}

// AddToDepartmentLocation adds the "ToDepartmentLocation" edges to the AssetTransferLog entity.
func (dlu *DepartmentLocationUpdate) AddToDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlu.AddToDepartmentLocationIDs(ids...)
}

// SetDepartment sets the "Department" edge to the Department entity.
func (dlu *DepartmentLocationUpdate) SetDepartment(d *Department) *DepartmentLocationUpdate {
	return dlu.SetDepartmentID(d.ID)
}

// SetLocation sets the "Location" edge to the Location entity.
func (dlu *DepartmentLocationUpdate) SetLocation(l *Location) *DepartmentLocationUpdate {
	return dlu.SetLocationID(l.ID)
}

// Mutation returns the DepartmentLocationMutation object of the builder.
func (dlu *DepartmentLocationUpdate) Mutation() *DepartmentLocationMutation {
	return dlu.mutation
}

// ClearAsset clears all "Asset" edges to the Asset entity.
func (dlu *DepartmentLocationUpdate) ClearAsset() *DepartmentLocationUpdate {
	dlu.mutation.ClearAsset()
	return dlu
}

// RemoveAssetIDs removes the "Asset" edge to Asset entities by IDs.
func (dlu *DepartmentLocationUpdate) RemoveAssetIDs(ids ...int) *DepartmentLocationUpdate {
	dlu.mutation.RemoveAssetIDs(ids...)
	return dlu
}

// RemoveAsset removes "Asset" edges to Asset entities.
func (dlu *DepartmentLocationUpdate) RemoveAsset(a ...*Asset) *DepartmentLocationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlu.RemoveAssetIDs(ids...)
}

// ClearFromDepartmentLocation clears all "FromDepartmentLocation" edges to the AssetTransferLog entity.
func (dlu *DepartmentLocationUpdate) ClearFromDepartmentLocation() *DepartmentLocationUpdate {
	dlu.mutation.ClearFromDepartmentLocation()
	return dlu
}

// RemoveFromDepartmentLocationIDs removes the "FromDepartmentLocation" edge to AssetTransferLog entities by IDs.
func (dlu *DepartmentLocationUpdate) RemoveFromDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdate {
	dlu.mutation.RemoveFromDepartmentLocationIDs(ids...)
	return dlu
}

// RemoveFromDepartmentLocation removes "FromDepartmentLocation" edges to AssetTransferLog entities.
func (dlu *DepartmentLocationUpdate) RemoveFromDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlu.RemoveFromDepartmentLocationIDs(ids...)
}

// ClearToDepartmentLocation clears all "ToDepartmentLocation" edges to the AssetTransferLog entity.
func (dlu *DepartmentLocationUpdate) ClearToDepartmentLocation() *DepartmentLocationUpdate {
	dlu.mutation.ClearToDepartmentLocation()
	return dlu
}

// RemoveToDepartmentLocationIDs removes the "ToDepartmentLocation" edge to AssetTransferLog entities by IDs.
func (dlu *DepartmentLocationUpdate) RemoveToDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdate {
	dlu.mutation.RemoveToDepartmentLocationIDs(ids...)
	return dlu
}

// RemoveToDepartmentLocation removes "ToDepartmentLocation" edges to AssetTransferLog entities.
func (dlu *DepartmentLocationUpdate) RemoveToDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dlu.RemoveToDepartmentLocationIDs(ids...)
}

// ClearDepartment clears the "Department" edge to the Department entity.
func (dlu *DepartmentLocationUpdate) ClearDepartment() *DepartmentLocationUpdate {
	dlu.mutation.ClearDepartment()
	return dlu
}

// ClearLocation clears the "Location" edge to the Location entity.
func (dlu *DepartmentLocationUpdate) ClearLocation() *DepartmentLocationUpdate {
	dlu.mutation.ClearLocation()
	return dlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dlu *DepartmentLocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DepartmentLocationMutation](ctx, dlu.sqlSave, dlu.mutation, dlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dlu *DepartmentLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := dlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dlu *DepartmentLocationUpdate) Exec(ctx context.Context) error {
	_, err := dlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlu *DepartmentLocationUpdate) ExecX(ctx context.Context) {
	if err := dlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dlu *DepartmentLocationUpdate) check() error {
	if _, ok := dlu.mutation.DepartmentID(); dlu.mutation.DepartmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DepartmentLocation.Department"`)
	}
	if _, ok := dlu.mutation.LocationID(); dlu.mutation.LocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DepartmentLocation.Location"`)
	}
	return nil
}

func (dlu *DepartmentLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(departmentlocation.Table, departmentlocation.Columns, sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt))
	if ps := dlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dlu.mutation.EndDate(); ok {
		_spec.SetField(departmentlocation.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := dlu.mutation.StartDate(); ok {
		_spec.SetField(departmentlocation.FieldStartDate, field.TypeTime, value)
	}
	if dlu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.RemovedAssetIDs(); len(nodes) > 0 && !dlu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dlu.mutation.FromDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.RemovedFromDepartmentLocationIDs(); len(nodes) > 0 && !dlu.mutation.FromDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.FromDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dlu.mutation.ToDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.RemovedToDepartmentLocationIDs(); len(nodes) > 0 && !dlu.mutation.ToDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.ToDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dlu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.DepartmentTable,
			Columns: []string{departmentlocation.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.DepartmentTable,
			Columns: []string{departmentlocation.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dlu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.LocationTable,
			Columns: []string{departmentlocation.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dlu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.LocationTable,
			Columns: []string{departmentlocation.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{departmentlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dlu.mutation.done = true
	return n, nil
}

// DepartmentLocationUpdateOne is the builder for updating a single DepartmentLocation entity.
type DepartmentLocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentLocationMutation
}

// SetDepartmentID sets the "DepartmentID" field.
func (dluo *DepartmentLocationUpdateOne) SetDepartmentID(i int) *DepartmentLocationUpdateOne {
	dluo.mutation.SetDepartmentID(i)
	return dluo
}

// SetLocationID sets the "LocationID" field.
func (dluo *DepartmentLocationUpdateOne) SetLocationID(i int) *DepartmentLocationUpdateOne {
	dluo.mutation.SetLocationID(i)
	return dluo
}

// SetEndDate sets the "EndDate" field.
func (dluo *DepartmentLocationUpdateOne) SetEndDate(t time.Time) *DepartmentLocationUpdateOne {
	dluo.mutation.SetEndDate(t)
	return dluo
}

// SetStartDate sets the "StartDate" field.
func (dluo *DepartmentLocationUpdateOne) SetStartDate(t time.Time) *DepartmentLocationUpdateOne {
	dluo.mutation.SetStartDate(t)
	return dluo
}

// AddAssetIDs adds the "Asset" edge to the Asset entity by IDs.
func (dluo *DepartmentLocationUpdateOne) AddAssetIDs(ids ...int) *DepartmentLocationUpdateOne {
	dluo.mutation.AddAssetIDs(ids...)
	return dluo
}

// AddAsset adds the "Asset" edges to the Asset entity.
func (dluo *DepartmentLocationUpdateOne) AddAsset(a ...*Asset) *DepartmentLocationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dluo.AddAssetIDs(ids...)
}

// AddFromDepartmentLocationIDs adds the "FromDepartmentLocation" edge to the AssetTransferLog entity by IDs.
func (dluo *DepartmentLocationUpdateOne) AddFromDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdateOne {
	dluo.mutation.AddFromDepartmentLocationIDs(ids...)
	return dluo
}

// AddFromDepartmentLocation adds the "FromDepartmentLocation" edges to the AssetTransferLog entity.
func (dluo *DepartmentLocationUpdateOne) AddFromDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dluo.AddFromDepartmentLocationIDs(ids...)
}

// AddToDepartmentLocationIDs adds the "ToDepartmentLocation" edge to the AssetTransferLog entity by IDs.
func (dluo *DepartmentLocationUpdateOne) AddToDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdateOne {
	dluo.mutation.AddToDepartmentLocationIDs(ids...)
	return dluo
}

// AddToDepartmentLocation adds the "ToDepartmentLocation" edges to the AssetTransferLog entity.
func (dluo *DepartmentLocationUpdateOne) AddToDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dluo.AddToDepartmentLocationIDs(ids...)
}

// SetDepartment sets the "Department" edge to the Department entity.
func (dluo *DepartmentLocationUpdateOne) SetDepartment(d *Department) *DepartmentLocationUpdateOne {
	return dluo.SetDepartmentID(d.ID)
}

// SetLocation sets the "Location" edge to the Location entity.
func (dluo *DepartmentLocationUpdateOne) SetLocation(l *Location) *DepartmentLocationUpdateOne {
	return dluo.SetLocationID(l.ID)
}

// Mutation returns the DepartmentLocationMutation object of the builder.
func (dluo *DepartmentLocationUpdateOne) Mutation() *DepartmentLocationMutation {
	return dluo.mutation
}

// ClearAsset clears all "Asset" edges to the Asset entity.
func (dluo *DepartmentLocationUpdateOne) ClearAsset() *DepartmentLocationUpdateOne {
	dluo.mutation.ClearAsset()
	return dluo
}

// RemoveAssetIDs removes the "Asset" edge to Asset entities by IDs.
func (dluo *DepartmentLocationUpdateOne) RemoveAssetIDs(ids ...int) *DepartmentLocationUpdateOne {
	dluo.mutation.RemoveAssetIDs(ids...)
	return dluo
}

// RemoveAsset removes "Asset" edges to Asset entities.
func (dluo *DepartmentLocationUpdateOne) RemoveAsset(a ...*Asset) *DepartmentLocationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dluo.RemoveAssetIDs(ids...)
}

// ClearFromDepartmentLocation clears all "FromDepartmentLocation" edges to the AssetTransferLog entity.
func (dluo *DepartmentLocationUpdateOne) ClearFromDepartmentLocation() *DepartmentLocationUpdateOne {
	dluo.mutation.ClearFromDepartmentLocation()
	return dluo
}

// RemoveFromDepartmentLocationIDs removes the "FromDepartmentLocation" edge to AssetTransferLog entities by IDs.
func (dluo *DepartmentLocationUpdateOne) RemoveFromDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdateOne {
	dluo.mutation.RemoveFromDepartmentLocationIDs(ids...)
	return dluo
}

// RemoveFromDepartmentLocation removes "FromDepartmentLocation" edges to AssetTransferLog entities.
func (dluo *DepartmentLocationUpdateOne) RemoveFromDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dluo.RemoveFromDepartmentLocationIDs(ids...)
}

// ClearToDepartmentLocation clears all "ToDepartmentLocation" edges to the AssetTransferLog entity.
func (dluo *DepartmentLocationUpdateOne) ClearToDepartmentLocation() *DepartmentLocationUpdateOne {
	dluo.mutation.ClearToDepartmentLocation()
	return dluo
}

// RemoveToDepartmentLocationIDs removes the "ToDepartmentLocation" edge to AssetTransferLog entities by IDs.
func (dluo *DepartmentLocationUpdateOne) RemoveToDepartmentLocationIDs(ids ...int) *DepartmentLocationUpdateOne {
	dluo.mutation.RemoveToDepartmentLocationIDs(ids...)
	return dluo
}

// RemoveToDepartmentLocation removes "ToDepartmentLocation" edges to AssetTransferLog entities.
func (dluo *DepartmentLocationUpdateOne) RemoveToDepartmentLocation(a ...*AssetTransferLog) *DepartmentLocationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dluo.RemoveToDepartmentLocationIDs(ids...)
}

// ClearDepartment clears the "Department" edge to the Department entity.
func (dluo *DepartmentLocationUpdateOne) ClearDepartment() *DepartmentLocationUpdateOne {
	dluo.mutation.ClearDepartment()
	return dluo
}

// ClearLocation clears the "Location" edge to the Location entity.
func (dluo *DepartmentLocationUpdateOne) ClearLocation() *DepartmentLocationUpdateOne {
	dluo.mutation.ClearLocation()
	return dluo
}

// Where appends a list predicates to the DepartmentLocationUpdate builder.
func (dluo *DepartmentLocationUpdateOne) Where(ps ...predicate.DepartmentLocation) *DepartmentLocationUpdateOne {
	dluo.mutation.Where(ps...)
	return dluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dluo *DepartmentLocationUpdateOne) Select(field string, fields ...string) *DepartmentLocationUpdateOne {
	dluo.fields = append([]string{field}, fields...)
	return dluo
}

// Save executes the query and returns the updated DepartmentLocation entity.
func (dluo *DepartmentLocationUpdateOne) Save(ctx context.Context) (*DepartmentLocation, error) {
	return withHooks[*DepartmentLocation, DepartmentLocationMutation](ctx, dluo.sqlSave, dluo.mutation, dluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dluo *DepartmentLocationUpdateOne) SaveX(ctx context.Context) *DepartmentLocation {
	node, err := dluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dluo *DepartmentLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := dluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dluo *DepartmentLocationUpdateOne) ExecX(ctx context.Context) {
	if err := dluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dluo *DepartmentLocationUpdateOne) check() error {
	if _, ok := dluo.mutation.DepartmentID(); dluo.mutation.DepartmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DepartmentLocation.Department"`)
	}
	if _, ok := dluo.mutation.LocationID(); dluo.mutation.LocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DepartmentLocation.Location"`)
	}
	return nil
}

func (dluo *DepartmentLocationUpdateOne) sqlSave(ctx context.Context) (_node *DepartmentLocation, err error) {
	if err := dluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(departmentlocation.Table, departmentlocation.Columns, sqlgraph.NewFieldSpec(departmentlocation.FieldID, field.TypeInt))
	id, ok := dluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DepartmentLocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, departmentlocation.FieldID)
		for _, f := range fields {
			if !departmentlocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != departmentlocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dluo.mutation.EndDate(); ok {
		_spec.SetField(departmentlocation.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := dluo.mutation.StartDate(); ok {
		_spec.SetField(departmentlocation.FieldStartDate, field.TypeTime, value)
	}
	if dluo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.RemovedAssetIDs(); len(nodes) > 0 && !dluo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.AssetTable,
			Columns: []string{departmentlocation.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dluo.mutation.FromDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.RemovedFromDepartmentLocationIDs(); len(nodes) > 0 && !dluo.mutation.FromDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.FromDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.FromDepartmentLocationTable,
			Columns: []string{departmentlocation.FromDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dluo.mutation.ToDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.RemovedToDepartmentLocationIDs(); len(nodes) > 0 && !dluo.mutation.ToDepartmentLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.ToDepartmentLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   departmentlocation.ToDepartmentLocationTable,
			Columns: []string{departmentlocation.ToDepartmentLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dluo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.DepartmentTable,
			Columns: []string{departmentlocation.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.DepartmentTable,
			Columns: []string{departmentlocation.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dluo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.LocationTable,
			Columns: []string{departmentlocation.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dluo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   departmentlocation.LocationTable,
			Columns: []string{departmentlocation.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DepartmentLocation{config: dluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{departmentlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dluo.mutation.done = true
	return _node, nil
}
